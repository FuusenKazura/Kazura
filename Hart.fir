;buildInfoPackage: chisel3, version: 3.2.1, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Hart : 
  module BranchPredictor : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<16>, flip stall : UInt<1>, flip learning : {valid : UInt<1>, bits : {pc : UInt<16>, result : UInt<1>}}, predict : UInt<1>}
    
    cmem table : UInt<2>[32] @[BranchPredictor.scala 27:35]
    reg prev_pc : UInt, clock with : (reset => (reset, io.pc)) @[BranchPredictor.scala 49:30]
    node pc = mux(io.stall, prev_pc, io.pc) @[BranchPredictor.scala 50:21]
    prev_pc <= pc @[BranchPredictor.scala 51:11]
    reg addr : UInt, clock @[BranchPredictor.scala 55:27]
    addr <= io.learning.bits.pc @[BranchPredictor.scala 55:27]
    node _T = bits(io.learning.bits.pc, 4, 0) @[BranchPredictor.scala 56:73]
    read mport _T_1 = table[_T], clock @[BranchPredictor.scala 56:73]
    node _T_2 = eq(UInt<2>("h03"), _T_1) @[Mux.scala 68:19]
    node _T_3 = mux(_T_2, UInt<2>("h03"), UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_4 = eq(UInt<2>("h02"), _T_1) @[Mux.scala 68:19]
    node _T_5 = mux(_T_4, UInt<2>("h03"), _T_3) @[Mux.scala 68:16]
    node _T_6 = eq(UInt<1>("h01"), _T_1) @[Mux.scala 68:19]
    node _T_7 = mux(_T_6, UInt<2>("h02"), _T_5) @[Mux.scala 68:16]
    node _T_8 = eq(UInt<1>("h00"), _T_1) @[Mux.scala 68:19]
    node _T_9 = mux(_T_8, UInt<1>("h01"), _T_7) @[Mux.scala 68:16]
    node _T_10 = eq(UInt<2>("h03"), _T_1) @[Mux.scala 68:19]
    node _T_11 = mux(_T_10, UInt<2>("h02"), UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_12 = eq(UInt<2>("h02"), _T_1) @[Mux.scala 68:19]
    node _T_13 = mux(_T_12, UInt<1>("h01"), _T_11) @[Mux.scala 68:16]
    node _T_14 = eq(UInt<1>("h01"), _T_1) @[Mux.scala 68:19]
    node _T_15 = mux(_T_14, UInt<1>("h00"), _T_13) @[Mux.scala 68:16]
    node _T_16 = eq(UInt<1>("h00"), _T_1) @[Mux.scala 68:19]
    node _T_17 = mux(_T_16, UInt<1>("h00"), _T_15) @[Mux.scala 68:16]
    node _T_18 = mux(io.learning.bits.result, _T_9, _T_17) @[BranchPredictor.scala 41:43]
    reg updated : UInt, clock @[BranchPredictor.scala 56:30]
    updated <= _T_18 @[BranchPredictor.scala 56:30]
    reg _T_19 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BranchPredictor.scala 57:16]
    _T_19 <= io.learning.valid @[BranchPredictor.scala 57:16]
    when _T_19 : @[BranchPredictor.scala 57:46]
      node _T_20 = or(addr, UInt<5>("h00"))
      node _T_21 = bits(_T_20, 4, 0)
      write mport _T_22 = table[_T_21], clock
      _T_22 <= updated
      skip @[BranchPredictor.scala 57:46]
    node _T_23 = or(pc, UInt<5>("h00")) @[BranchPredictor.scala 61:33]
    node _T_24 = bits(_T_23, 4, 0) @[BranchPredictor.scala 61:33]
    read mport _T_25 = table[_T_24], clock @[BranchPredictor.scala 61:33]
    node _T_26 = eq(UInt<2>("h03"), _T_25) @[Mux.scala 68:19]
    node _T_27 = mux(_T_26, UInt<1>("h01"), UInt<1>("h01")) @[Mux.scala 68:16]
    node _T_28 = eq(UInt<2>("h02"), _T_25) @[Mux.scala 68:19]
    node _T_29 = mux(_T_28, UInt<1>("h01"), _T_27) @[Mux.scala 68:16]
    node _T_30 = eq(UInt<1>("h01"), _T_25) @[Mux.scala 68:19]
    node _T_31 = mux(_T_30, UInt<1>("h00"), _T_29) @[Mux.scala 68:16]
    node _T_32 = eq(UInt<1>("h00"), _T_25) @[Mux.scala 68:19]
    node _T_33 = mux(_T_32, UInt<1>("h00"), _T_31) @[Mux.scala 68:16]
    io.predict <= _T_33 @[BranchPredictor.scala 61:14]
    
  module Fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip prev_pc : UInt<16>, flip in : {branch_mispredicted : UInt<1>, branch_graduated : UInt<1>, restoration_pc : UInt<16>, predict : UInt<1>, predict_enable : UInt<1>, predict_pc : UInt<16>, is_jump : UInt<1>, jump_pc : UInt<16>, stall : UInt<1>}, out : {pc : UInt<16>}}
    
    node _T = add(io.prev_pc, UInt<1>("h01")) @[Fetch.scala 21:34]
    node next_pc = tail(_T, 1) @[Fetch.scala 21:34]
    node _T_1 = and(io.in.branch_graduated, io.in.branch_mispredicted) @[Fetch.scala 25:29]
    node _T_2 = and(io.in.predict_enable, io.in.predict) @[Fetch.scala 29:27]
    node _T_3 = mux(io.in.stall, io.prev_pc, next_pc) @[Mux.scala 87:16]
    node _T_4 = mux(_T_2, io.in.predict_pc, _T_3) @[Mux.scala 87:16]
    node _T_5 = mux(io.in.is_jump, io.in.jump_pc, _T_4) @[Mux.scala 87:16]
    node _T_6 = mux(_T_1, io.in.restoration_pc, _T_5) @[Mux.scala 87:16]
    io.out.pc <= _T_6 @[Fetch.scala 23:13]
    node _T_7 = asUInt(reset) @[Fetch.scala 34:9]
    node _T_8 = eq(_T_7, UInt<1>("h00")) @[Fetch.scala 34:9]
    when _T_8 : @[Fetch.scala 34:9]
      printf(clock, UInt<1>(1), "pc: %d, next_pc: %d, branch_mispredicted_enable: %d, branch_mispredicted: %d, restore_pc: %d\n", io.prev_pc, io.out.pc, io.in.branch_graduated, io.in.branch_mispredicted, io.in.restoration_pc) @[Fetch.scala 34:9]
      skip @[Fetch.scala 34:9]
    
  module IF : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {branch_mispredicted : UInt<1>, branch_graduated : UInt<1>, restoration_pc : UInt<16>, predict : UInt<1>, predict_enable : UInt<1>, predict_pc : UInt<16>, is_jump : UInt<1>, jump_pc : UInt<16>, stall : UInt<1>}, out : {pc : UInt<16>, total_cnt : UInt<16>, inst_bits : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>}}}
    
    wire _T : UInt<16>[32] @[IF.scala 34:44]
    _T[0] <= UInt<16>("h09200") @[IF.scala 34:44]
    _T[1] <= UInt<16>("h09400") @[IF.scala 34:44]
    _T[2] <= UInt<16>("h09609") @[IF.scala 34:44]
    _T[3] <= UInt<16>("h09800") @[IF.scala 34:44]
    _T[4] <= UInt<15>("h05201") @[IF.scala 34:44]
    _T[5] <= UInt<13>("h01440") @[IF.scala 34:44]
    _T[6] <= UInt<16>("h0d2c3") @[IF.scala 34:44]
    _T[7] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[8] <= UInt<16>("h0e1fc") @[IF.scala 34:44]
    _T[9] <= UInt<13>("h01880") @[IF.scala 34:44]
    _T[10] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[11] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[12] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[13] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[14] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[15] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[16] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[17] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[18] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[19] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[20] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[21] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[22] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[23] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[24] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[25] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[26] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[27] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[28] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[29] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[30] <= UInt<1>("h00") @[IF.scala 34:44]
    _T[31] <= UInt<1>("h00") @[IF.scala 34:44]
    reg inst_mem : UInt<16>[32], clock with : (reset => (reset, _T)) @[IF.scala 34:36]
    reg pc : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IF.scala 35:25]
    reg total_cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IF.scala 36:32]
    node _T_1 = add(total_cnt, UInt<16>("h01")) @[IF.scala 37:26]
    node _T_2 = tail(_T_1, 1) @[IF.scala 37:26]
    total_cnt <= _T_2 @[IF.scala 37:13]
    inst fetch of Fetch @[IF.scala 39:28]
    fetch.clock <= clock
    fetch.reset <= reset
    fetch.io.in.predict <= io.in.predict @[IF.scala 40:23]
    fetch.io.in.predict_enable <= io.in.predict_enable @[IF.scala 41:30]
    fetch.io.in.predict_pc <= io.in.predict_pc @[IF.scala 42:26]
    fetch.io.in.branch_mispredicted <= io.in.branch_mispredicted @[IF.scala 43:35]
    fetch.io.in.branch_graduated <= io.in.branch_graduated @[IF.scala 44:32]
    fetch.io.in.restoration_pc <= io.in.restoration_pc @[IF.scala 45:30]
    fetch.io.in.is_jump <= io.in.is_jump @[IF.scala 47:23]
    fetch.io.in.jump_pc <= io.in.jump_pc @[IF.scala 48:23]
    fetch.io.in.stall <= io.in.stall @[IF.scala 49:21]
    fetch.io.prev_pc <= pc @[IF.scala 51:20]
    pc <= fetch.io.out.pc @[IF.scala 53:6]
    io.out.pc <= pc @[IF.scala 55:13]
    io.out.total_cnt <= total_cnt @[IF.scala 56:20]
    node _T_3 = bits(pc, 4, 0)
    wire _T_4 : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>} @[IF.scala 57:44]
    wire _T_5 : UInt<16>
    _T_5 <= inst_mem[_T_3]
    node _T_6 = bits(_T_5, 5, 0) @[IF.scala 57:44]
    _T_4.disp6u <= _T_6 @[IF.scala 57:44]
    node _T_7 = bits(_T_5, 8, 6) @[IF.scala 57:44]
    _T_4.rs <= _T_7 @[IF.scala 57:44]
    node _T_8 = bits(_T_5, 11, 9) @[IF.scala 57:44]
    _T_4.rd <= _T_8 @[IF.scala 57:44]
    node _T_9 = bits(_T_5, 15, 12) @[IF.scala 57:44]
    _T_4.op <= _T_9 @[IF.scala 57:44]
    io.out.inst_bits.disp6u <= _T_4.disp6u @[IF.scala 57:20]
    io.out.inst_bits.rs <= _T_4.rs @[IF.scala 57:20]
    io.out.inst_bits.rd <= _T_4.rd @[IF.scala 57:20]
    io.out.inst_bits.op <= _T_4.op @[IF.scala 57:20]
    
  module Decoder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst_bits : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>}, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}, source_sel : UInt<16>[2]}
    
    io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
    io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
    io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
    io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
    io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
    io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
    io.source_sel[0] <= UInt<1>("h00") @[Decoder.scala 28:24]
    io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
    io.ctrl.rs1_use <= UInt<1>("h00") @[Decoder.scala 30:24]
    io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
    node _T = eq(io.inst_bits.op, UInt<1>("h00")) @[Decoder.scala 36:26]
    when _T : @[Decoder.scala 36:38]
      io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
      io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
      io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
      io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
      io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
      io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
      io.source_sel[0] <= UInt<1>("h00") @[Decoder.scala 28:24]
      io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
      io.ctrl.rs1_use <= UInt<1>("h00") @[Decoder.scala 30:24]
      io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
      skip @[Decoder.scala 36:38]
    else : @[Decoder.scala 39:45]
      node _T_1 = eq(io.inst_bits.op, UInt<1>("h01")) @[Decoder.scala 39:32]
      when _T_1 : @[Decoder.scala 39:45]
        io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
        io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
        io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
        io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
        io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
        io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
        io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
        io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
        io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
        io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
        skip @[Decoder.scala 39:45]
      else : @[Decoder.scala 39:45]
        node _T_2 = eq(io.inst_bits.op, UInt<2>("h02")) @[Decoder.scala 39:32]
        when _T_2 : @[Decoder.scala 39:45]
          io.ctrl.alu_op <= UInt<1>("h01") @[Decoder.scala 21:23]
          io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
          io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
          io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
          io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
          io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
          io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
          io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
          io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
          io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
          skip @[Decoder.scala 39:45]
        else : @[Decoder.scala 39:45]
          node _T_3 = eq(io.inst_bits.op, UInt<2>("h03")) @[Decoder.scala 39:32]
          when _T_3 : @[Decoder.scala 39:45]
            io.ctrl.alu_op <= UInt<2>("h02") @[Decoder.scala 21:23]
            io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
            io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
            io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
            io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
            io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
            io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
            io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
            io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
            io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
            skip @[Decoder.scala 39:45]
          else : @[Decoder.scala 39:45]
            node _T_4 = eq(io.inst_bits.op, UInt<3>("h04")) @[Decoder.scala 39:32]
            when _T_4 : @[Decoder.scala 39:45]
              io.ctrl.alu_op <= UInt<2>("h03") @[Decoder.scala 21:23]
              io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
              io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
              io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
              io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
              io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
              io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
              io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
              io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
              io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
              skip @[Decoder.scala 39:45]
            else : @[Decoder.scala 39:45]
              node _T_5 = eq(io.inst_bits.op, UInt<3>("h05")) @[Decoder.scala 39:32]
              when _T_5 : @[Decoder.scala 39:45]
                io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                io.source_sel[1] <= UInt<2>("h02") @[Decoder.scala 28:24]
                io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                skip @[Decoder.scala 39:45]
              else : @[Decoder.scala 39:45]
                node _T_6 = eq(io.inst_bits.op, UInt<3>("h06")) @[Decoder.scala 39:32]
                when _T_6 : @[Decoder.scala 39:45]
                  io.ctrl.alu_op <= UInt<1>("h01") @[Decoder.scala 21:23]
                  io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                  io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                  io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                  io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                  io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                  io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                  io.source_sel[1] <= UInt<2>("h02") @[Decoder.scala 28:24]
                  io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                  io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                  skip @[Decoder.scala 39:45]
                else : @[Decoder.scala 39:45]
                  node _T_7 = eq(io.inst_bits.op, UInt<3>("h07")) @[Decoder.scala 39:32]
                  when _T_7 : @[Decoder.scala 39:45]
                    io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                    io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                    io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                    io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                    io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                    io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                    io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                    io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
                    io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                    io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                    skip @[Decoder.scala 39:45]
                  else : @[Decoder.scala 39:45]
                    node _T_8 = eq(io.inst_bits.op, UInt<3>("h07")) @[Decoder.scala 39:32]
                    when _T_8 : @[Decoder.scala 39:45]
                      io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                      io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                      io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                      io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                      io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                      io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                      io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                      io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
                      io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                      io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                      skip @[Decoder.scala 39:45]
                    else : @[Decoder.scala 39:45]
                      node _T_9 = eq(io.inst_bits.op, UInt<4>("h08")) @[Decoder.scala 39:32]
                      when _T_9 : @[Decoder.scala 39:45]
                        io.ctrl.alu_op <= UInt<1>("h01") @[Decoder.scala 21:23]
                        io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                        io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                        io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                        io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                        io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                        io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                        io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
                        io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                        io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                        skip @[Decoder.scala 39:45]
                      else : @[Decoder.scala 39:45]
                        node _T_10 = eq(io.inst_bits.op, UInt<4>("h09")) @[Decoder.scala 39:32]
                        when _T_10 : @[Decoder.scala 39:45]
                          io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                          io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                          io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                          io.ctrl.rf_w <= UInt<1>("h01") @[Decoder.scala 24:23]
                          io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                          io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                          io.source_sel[0] <= UInt<1>("h00") @[Decoder.scala 28:24]
                          io.source_sel[1] <= UInt<2>("h02") @[Decoder.scala 28:24]
                          io.ctrl.rs1_use <= UInt<1>("h00") @[Decoder.scala 30:24]
                          io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                          skip @[Decoder.scala 39:45]
                        else : @[Decoder.scala 39:45]
                          node _T_11 = eq(io.inst_bits.op, UInt<4>("h0a")) @[Decoder.scala 39:32]
                          when _T_11 : @[Decoder.scala 39:45]
                            io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                            io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                            io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                            io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                            io.ctrl.mem_r <= UInt<1>("h01") @[Decoder.scala 25:23]
                            io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                            io.source_sel[0] <= UInt<2>("h03") @[Decoder.scala 28:24]
                            io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
                            io.ctrl.rs1_use <= UInt<1>("h00") @[Decoder.scala 30:24]
                            io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
                            skip @[Decoder.scala 39:45]
                          else : @[Decoder.scala 39:45]
                            node _T_12 = eq(io.inst_bits.op, UInt<4>("h0b")) @[Decoder.scala 39:32]
                            when _T_12 : @[Decoder.scala 39:45]
                              io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                              io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                              io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                              io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                              io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                              io.ctrl.mem_w <= UInt<1>("h01") @[Decoder.scala 26:23]
                              io.source_sel[0] <= UInt<2>("h03") @[Decoder.scala 28:24]
                              io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
                              io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                              io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
                              skip @[Decoder.scala 39:45]
                            else : @[Decoder.scala 39:45]
                              node _T_13 = eq(io.inst_bits.op, UInt<4>("h0c")) @[Decoder.scala 39:32]
                              when _T_13 : @[Decoder.scala 39:45]
                                io.ctrl.alu_op <= UInt<3>("h04") @[Decoder.scala 21:23]
                                io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                                io.ctrl.is_branch <= UInt<1>("h01") @[Decoder.scala 23:23]
                                io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                                io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                                io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                                io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                                io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
                                io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                                io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
                                skip @[Decoder.scala 39:45]
                              else : @[Decoder.scala 39:45]
                                node _T_14 = eq(io.inst_bits.op, UInt<4>("h0d")) @[Decoder.scala 39:32]
                                when _T_14 : @[Decoder.scala 39:45]
                                  io.ctrl.alu_op <= UInt<3>("h05") @[Decoder.scala 21:23]
                                  io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                                  io.ctrl.is_branch <= UInt<1>("h01") @[Decoder.scala 23:23]
                                  io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                                  io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                                  io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                                  io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                                  io.source_sel[1] <= UInt<1>("h01") @[Decoder.scala 28:24]
                                  io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                                  io.ctrl.rs2_use <= UInt<1>("h01") @[Decoder.scala 31:24]
                                  skip @[Decoder.scala 39:45]
                                else : @[Decoder.scala 39:45]
                                  node _T_15 = eq(io.inst_bits.op, UInt<4>("h0e")) @[Decoder.scala 39:32]
                                  when _T_15 : @[Decoder.scala 39:45]
                                    io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                                    io.ctrl.is_jump <= UInt<1>("h01") @[Decoder.scala 22:23]
                                    io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                                    io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                                    io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                                    io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                                    io.source_sel[0] <= UInt<1>("h01") @[Decoder.scala 28:24]
                                    io.source_sel[1] <= UInt<2>("h02") @[Decoder.scala 28:24]
                                    io.ctrl.rs1_use <= UInt<1>("h01") @[Decoder.scala 30:24]
                                    io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                                    skip @[Decoder.scala 39:45]
                                  else : @[Decoder.scala 39:45]
                                    node _T_16 = eq(io.inst_bits.op, UInt<1>("h00")) @[Decoder.scala 39:32]
                                    when _T_16 : @[Decoder.scala 39:45]
                                      io.ctrl.alu_op <= UInt<1>("h00") @[Decoder.scala 21:23]
                                      io.ctrl.is_jump <= UInt<1>("h00") @[Decoder.scala 22:23]
                                      io.ctrl.is_branch <= UInt<1>("h00") @[Decoder.scala 23:23]
                                      io.ctrl.rf_w <= UInt<1>("h00") @[Decoder.scala 24:23]
                                      io.ctrl.mem_r <= UInt<1>("h00") @[Decoder.scala 25:23]
                                      io.ctrl.mem_w <= UInt<1>("h00") @[Decoder.scala 26:23]
                                      io.source_sel[0] <= UInt<1>("h00") @[Decoder.scala 28:24]
                                      io.source_sel[1] <= UInt<1>("h00") @[Decoder.scala 28:24]
                                      io.ctrl.rs1_use <= UInt<1>("h00") @[Decoder.scala 30:24]
                                      io.ctrl.rs2_use <= UInt<1>("h00") @[Decoder.scala 31:24]
                                      skip @[Decoder.scala 39:45]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip read_addr : UInt<3>[2], flip write : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[2], out : UInt<16>[2], rf4debug : UInt<16>[8]}
    
    reg rf : UInt<16>[8], clock @[RegisterFile.scala 23:26]
    node _T = eq(io.write[0].rd_addr, io.read_addr[0]) @[RegisterFile.scala 32:33]
    node _T_1 = and(io.write[0].rf_w, _T) @[RegisterFile.scala 32:19]
    node _T_2 = mux(_T_1, io.write[0], io.write[1]) @[RegisterFile.scala 32:10]
    wire _T_3 : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[1] @[RegisterFile.scala 31:52]
    _T_3[0].data <= _T_2.data @[RegisterFile.scala 31:52]
    _T_3[0].rf_w <= _T_2.rf_w @[RegisterFile.scala 31:52]
    _T_3[0].rd_addr <= _T_2.rd_addr @[RegisterFile.scala 31:52]
    node _T_4 = eq(_T_3[0].rd_addr, io.read_addr[0]) @[RegisterFile.scala 33:65]
    node _T_5 = and(_T_3[0].rf_w, _T_4) @[RegisterFile.scala 33:40]
    node _T_6 = mux(_T_5, _T_3[0].data, rf[io.read_addr[0]]) @[RegisterFile.scala 33:21]
    io.out[0] <= _T_6 @[RegisterFile.scala 33:15]
    node _T_7 = eq(io.write[0].rd_addr, io.read_addr[1]) @[RegisterFile.scala 32:33]
    node _T_8 = and(io.write[0].rf_w, _T_7) @[RegisterFile.scala 32:19]
    node _T_9 = mux(_T_8, io.write[0], io.write[1]) @[RegisterFile.scala 32:10]
    wire _T_10 : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[1] @[RegisterFile.scala 31:52]
    _T_10[0].data <= _T_9.data @[RegisterFile.scala 31:52]
    _T_10[0].rf_w <= _T_9.rf_w @[RegisterFile.scala 31:52]
    _T_10[0].rd_addr <= _T_9.rd_addr @[RegisterFile.scala 31:52]
    node _T_11 = eq(_T_10[0].rd_addr, io.read_addr[1]) @[RegisterFile.scala 33:65]
    node _T_12 = and(_T_10[0].rf_w, _T_11) @[RegisterFile.scala 33:40]
    node _T_13 = mux(_T_12, _T_10[0].data, rf[io.read_addr[1]]) @[RegisterFile.scala 33:21]
    io.out[1] <= _T_13 @[RegisterFile.scala 33:15]
    when io.write[0].rf_w : @[RegisterFile.scala 39:28]
      rf[io.write[0].rd_addr] <= io.write[0].data @[RegisterFile.scala 40:31]
      skip @[RegisterFile.scala 39:28]
    when io.write[1].rf_w : @[RegisterFile.scala 39:28]
      rf[io.write[1].rd_addr] <= io.write[1].data @[RegisterFile.scala 40:31]
      skip @[RegisterFile.scala 39:28]
    rf[0] <= UInt<1>("h00") @[RegisterFile.scala 43:9]
    io.rf4debug[0] <= rf[0] @[RegisterFile.scala 46:15]
    io.rf4debug[1] <= rf[1] @[RegisterFile.scala 46:15]
    io.rf4debug[2] <= rf[2] @[RegisterFile.scala 46:15]
    io.rf4debug[3] <= rf[3] @[RegisterFile.scala 46:15]
    io.rf4debug[4] <= rf[4] @[RegisterFile.scala 46:15]
    io.rf4debug[5] <= rf[5] @[RegisterFile.scala 46:15]
    io.rf4debug[6] <= rf[6] @[RegisterFile.scala 46:15]
    io.rf4debug[7] <= rf[7] @[RegisterFile.scala 46:15]
    node _T_14 = asUInt(reset) @[RegisterFile.scala 49:11]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[RegisterFile.scala 49:11]
    when _T_15 : @[RegisterFile.scala 49:11]
      printf(clock, UInt<1>(1), "we: %d, addr: %d, data: %d\n", io.write[0].rf_w, io.write[0].rd_addr, io.write[0].data) @[RegisterFile.scala 49:11]
      skip @[RegisterFile.scala 49:11]
    node _T_16 = asUInt(reset) @[RegisterFile.scala 49:11]
    node _T_17 = eq(_T_16, UInt<1>("h00")) @[RegisterFile.scala 49:11]
    when _T_17 : @[RegisterFile.scala 49:11]
      printf(clock, UInt<1>(1), "we: %d, addr: %d, data: %d\n", io.write[1].rf_w, io.write[1].rd_addr, io.write[1].data) @[RegisterFile.scala 49:11]
      skip @[RegisterFile.scala 49:11]
    node _T_18 = asUInt(reset) @[RegisterFile.scala 52:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[RegisterFile.scala 52:9]
    when _T_19 : @[RegisterFile.scala 52:9]
      printf(clock, UInt<1>(1), "rf: ") @[RegisterFile.scala 52:9]
      skip @[RegisterFile.scala 52:9]
    node _T_20 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_21 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "0:%d, ", rf[0]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_22 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_23 = eq(_T_22, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_23 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "1:%d, ", rf[1]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_24 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_25 = eq(_T_24, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_25 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "2:%d, ", rf[2]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_26 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_27 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "3:%d, ", rf[3]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_28 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_29 = eq(_T_28, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_29 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "4:%d, ", rf[4]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_30 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_31 = eq(_T_30, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_31 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "5:%d, ", rf[5]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_32 = asUInt(reset) @[RegisterFile.scala 54:11]
    node _T_33 = eq(_T_32, UInt<1>("h00")) @[RegisterFile.scala 54:11]
    when _T_33 : @[RegisterFile.scala 54:11]
      printf(clock, UInt<1>(1), "6:%d, ", rf[6]) @[RegisterFile.scala 54:11]
      skip @[RegisterFile.scala 54:11]
    node _T_34 = asUInt(reset) @[RegisterFile.scala 55:9]
    node _T_35 = eq(_T_34, UInt<1>("h00")) @[RegisterFile.scala 55:9]
    when _T_35 : @[RegisterFile.scala 55:9]
      printf(clock, UInt<1>(1), "7:%d\n", rf[7]) @[RegisterFile.scala 55:9]
      skip @[RegisterFile.scala 55:9]
    
  module BusyBit : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch_mispredicted : UInt<1>, flip branch_graduated : UInt<1>, flip release : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[2], flip req_rs_addr : UInt<3>[2], flip req_rd_w : UInt<1>, flip req_rd_addr : UInt<3>, rs_available : UInt<1>[2]}
    
    wire _T : UInt<1>[8] @[BusyBit.scala 22:44]
    _T[0] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[1] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[2] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[3] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[4] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[5] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[6] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    _T[7] <= UInt<1>("h00") @[BusyBit.scala 22:44]
    reg busy_bit : UInt<1>[8], clock with : (reset => (reset, _T)) @[BusyBit.scala 22:36]
    node _T_1 = eq(io.release[0].rd_addr, io.req_rs_addr[0]) @[BusyBit.scala 26:78]
    node _T_2 = and(io.release[0].rf_w, _T_1) @[BusyBit.scala 26:65]
    node _T_3 = eq(io.release[1].rd_addr, io.req_rs_addr[0]) @[BusyBit.scala 26:78]
    node _T_4 = and(io.release[1].rf_w, _T_3) @[BusyBit.scala 26:65]
    node _T_5 = or(UInt<1>("h00"), _T_2) @[BusyBit.scala 26:41]
    node _T_6 = or(_T_5, _T_4) @[BusyBit.scala 26:41]
    node _T_7 = eq(busy_bit[io.req_rs_addr[0]], UInt<1>("h00")) @[BusyBit.scala 27:27]
    node _T_8 = or(_T_7, _T_6) @[BusyBit.scala 27:56]
    io.rs_available[0] <= _T_8 @[BusyBit.scala 27:24]
    node _T_9 = eq(io.release[0].rd_addr, io.req_rs_addr[1]) @[BusyBit.scala 26:78]
    node _T_10 = and(io.release[0].rf_w, _T_9) @[BusyBit.scala 26:65]
    node _T_11 = eq(io.release[1].rd_addr, io.req_rs_addr[1]) @[BusyBit.scala 26:78]
    node _T_12 = and(io.release[1].rf_w, _T_11) @[BusyBit.scala 26:65]
    node _T_13 = or(UInt<1>("h00"), _T_10) @[BusyBit.scala 26:41]
    node _T_14 = or(_T_13, _T_12) @[BusyBit.scala 26:41]
    node _T_15 = eq(busy_bit[io.req_rs_addr[1]], UInt<1>("h00")) @[BusyBit.scala 27:27]
    node _T_16 = or(_T_15, _T_14) @[BusyBit.scala 27:56]
    io.rs_available[1] <= _T_16 @[BusyBit.scala 27:24]
    node _T_17 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_17 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_18 = eq(io.release[0].rd_addr, UInt<1>("h00")) @[BusyBit.scala 33:62]
      node _T_19 = and(io.release[0].rf_w, _T_18) @[BusyBit.scala 33:37]
      when _T_19 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_20 = eq(io.req_rd_addr, UInt<1>("h00")) @[BusyBit.scala 35:48]
        node _T_21 = and(io.req_rd_w, _T_20) @[BusyBit.scala 35:30]
        when _T_21 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_22 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_22 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_23 = eq(io.release[0].rd_addr, UInt<1>("h01")) @[BusyBit.scala 33:62]
      node _T_24 = and(io.release[0].rf_w, _T_23) @[BusyBit.scala 33:37]
      when _T_24 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_25 = eq(io.req_rd_addr, UInt<1>("h01")) @[BusyBit.scala 35:48]
        node _T_26 = and(io.req_rd_w, _T_25) @[BusyBit.scala 35:30]
        when _T_26 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_27 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_27 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_28 = eq(io.release[0].rd_addr, UInt<2>("h02")) @[BusyBit.scala 33:62]
      node _T_29 = and(io.release[0].rf_w, _T_28) @[BusyBit.scala 33:37]
      when _T_29 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_30 = eq(io.req_rd_addr, UInt<2>("h02")) @[BusyBit.scala 35:48]
        node _T_31 = and(io.req_rd_w, _T_30) @[BusyBit.scala 35:30]
        when _T_31 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_32 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_32 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_33 = eq(io.release[0].rd_addr, UInt<2>("h03")) @[BusyBit.scala 33:62]
      node _T_34 = and(io.release[0].rf_w, _T_33) @[BusyBit.scala 33:37]
      when _T_34 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_35 = eq(io.req_rd_addr, UInt<2>("h03")) @[BusyBit.scala 35:48]
        node _T_36 = and(io.req_rd_w, _T_35) @[BusyBit.scala 35:30]
        when _T_36 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_37 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_37 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_38 = eq(io.release[0].rd_addr, UInt<3>("h04")) @[BusyBit.scala 33:62]
      node _T_39 = and(io.release[0].rf_w, _T_38) @[BusyBit.scala 33:37]
      when _T_39 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_40 = eq(io.req_rd_addr, UInt<3>("h04")) @[BusyBit.scala 35:48]
        node _T_41 = and(io.req_rd_w, _T_40) @[BusyBit.scala 35:30]
        when _T_41 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_42 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_42 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_43 = eq(io.release[0].rd_addr, UInt<3>("h05")) @[BusyBit.scala 33:62]
      node _T_44 = and(io.release[0].rf_w, _T_43) @[BusyBit.scala 33:37]
      when _T_44 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_45 = eq(io.req_rd_addr, UInt<3>("h05")) @[BusyBit.scala 35:48]
        node _T_46 = and(io.req_rd_w, _T_45) @[BusyBit.scala 35:30]
        when _T_46 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_47 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_47 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_48 = eq(io.release[0].rd_addr, UInt<3>("h06")) @[BusyBit.scala 33:62]
      node _T_49 = and(io.release[0].rf_w, _T_48) @[BusyBit.scala 33:37]
      when _T_49 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_50 = eq(io.req_rd_addr, UInt<3>("h06")) @[BusyBit.scala 35:48]
        node _T_51 = and(io.req_rd_w, _T_50) @[BusyBit.scala 35:30]
        when _T_51 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_52 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_52 : @[BusyBit.scala 31:57]
      busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_53 = eq(io.release[0].rd_addr, UInt<3>("h07")) @[BusyBit.scala 33:62]
      node _T_54 = and(io.release[0].rf_w, _T_53) @[BusyBit.scala 33:37]
      when _T_54 : @[BusyBit.scala 33:71]
        busy_bit[io.release[0].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_55 = eq(io.req_rd_addr, UInt<3>("h07")) @[BusyBit.scala 35:48]
        node _T_56 = and(io.req_rd_w, _T_55) @[BusyBit.scala 35:30]
        when _T_56 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_57 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_57 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_58 = eq(io.release[1].rd_addr, UInt<1>("h00")) @[BusyBit.scala 33:62]
      node _T_59 = and(io.release[1].rf_w, _T_58) @[BusyBit.scala 33:37]
      when _T_59 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_60 = eq(io.req_rd_addr, UInt<1>("h00")) @[BusyBit.scala 35:48]
        node _T_61 = and(io.req_rd_w, _T_60) @[BusyBit.scala 35:30]
        when _T_61 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_62 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_62 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_63 = eq(io.release[1].rd_addr, UInt<1>("h01")) @[BusyBit.scala 33:62]
      node _T_64 = and(io.release[1].rf_w, _T_63) @[BusyBit.scala 33:37]
      when _T_64 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_65 = eq(io.req_rd_addr, UInt<1>("h01")) @[BusyBit.scala 35:48]
        node _T_66 = and(io.req_rd_w, _T_65) @[BusyBit.scala 35:30]
        when _T_66 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_67 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_67 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_68 = eq(io.release[1].rd_addr, UInt<2>("h02")) @[BusyBit.scala 33:62]
      node _T_69 = and(io.release[1].rf_w, _T_68) @[BusyBit.scala 33:37]
      when _T_69 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_70 = eq(io.req_rd_addr, UInt<2>("h02")) @[BusyBit.scala 35:48]
        node _T_71 = and(io.req_rd_w, _T_70) @[BusyBit.scala 35:30]
        when _T_71 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_72 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_72 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_73 = eq(io.release[1].rd_addr, UInt<2>("h03")) @[BusyBit.scala 33:62]
      node _T_74 = and(io.release[1].rf_w, _T_73) @[BusyBit.scala 33:37]
      when _T_74 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_75 = eq(io.req_rd_addr, UInt<2>("h03")) @[BusyBit.scala 35:48]
        node _T_76 = and(io.req_rd_w, _T_75) @[BusyBit.scala 35:30]
        when _T_76 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_77 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_77 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_78 = eq(io.release[1].rd_addr, UInt<3>("h04")) @[BusyBit.scala 33:62]
      node _T_79 = and(io.release[1].rf_w, _T_78) @[BusyBit.scala 33:37]
      when _T_79 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_80 = eq(io.req_rd_addr, UInt<3>("h04")) @[BusyBit.scala 35:48]
        node _T_81 = and(io.req_rd_w, _T_80) @[BusyBit.scala 35:30]
        when _T_81 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_82 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_82 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_83 = eq(io.release[1].rd_addr, UInt<3>("h05")) @[BusyBit.scala 33:62]
      node _T_84 = and(io.release[1].rf_w, _T_83) @[BusyBit.scala 33:37]
      when _T_84 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_85 = eq(io.req_rd_addr, UInt<3>("h05")) @[BusyBit.scala 35:48]
        node _T_86 = and(io.req_rd_w, _T_85) @[BusyBit.scala 35:30]
        when _T_86 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_87 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_87 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_88 = eq(io.release[1].rd_addr, UInt<3>("h06")) @[BusyBit.scala 33:62]
      node _T_89 = and(io.release[1].rf_w, _T_88) @[BusyBit.scala 33:37]
      when _T_89 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_90 = eq(io.req_rd_addr, UInt<3>("h06")) @[BusyBit.scala 35:48]
        node _T_91 = and(io.req_rd_w, _T_90) @[BusyBit.scala 35:30]
        when _T_91 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_92 = and(io.branch_graduated, io.branch_mispredicted) @[BusyBit.scala 31:30]
    when _T_92 : @[BusyBit.scala 31:57]
      busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 32:39]
      skip @[BusyBit.scala 31:57]
    else : @[BusyBit.scala 33:71]
      node _T_93 = eq(io.release[1].rd_addr, UInt<3>("h07")) @[BusyBit.scala 33:62]
      node _T_94 = and(io.release[1].rf_w, _T_93) @[BusyBit.scala 33:37]
      when _T_94 : @[BusyBit.scala 33:71]
        busy_bit[io.release[1].rd_addr] <= UInt<1>("h00") @[BusyBit.scala 34:39]
        skip @[BusyBit.scala 33:71]
      else : @[BusyBit.scala 35:57]
        node _T_95 = eq(io.req_rd_addr, UInt<3>("h07")) @[BusyBit.scala 35:48]
        node _T_96 = and(io.req_rd_w, _T_95) @[BusyBit.scala 35:30]
        when _T_96 : @[BusyBit.scala 35:57]
          busy_bit[io.req_rd_addr] <= UInt<1>("h01") @[BusyBit.scala 36:32]
          skip @[BusyBit.scala 35:57]
    node _T_97 = asUInt(reset) @[BusyBit.scala 40:9]
    node _T_98 = eq(_T_97, UInt<1>("h00")) @[BusyBit.scala 40:9]
    when _T_98 : @[BusyBit.scala 40:9]
      printf(clock, UInt<1>(1), "busy_bit: ") @[BusyBit.scala 40:9]
      skip @[BusyBit.scala 40:9]
    node _T_99 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_100 = eq(_T_99, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_100 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[0]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_101 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_102 = eq(_T_101, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_102 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[1]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_103 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_104 = eq(_T_103, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_104 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[2]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_105 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_106 = eq(_T_105, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_106 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[3]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_107 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_108 = eq(_T_107, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_108 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[4]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_109 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_110 = eq(_T_109, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_110 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[5]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_111 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_112 = eq(_T_111, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_112 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[6]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_113 = asUInt(reset) @[BusyBit.scala 40:57]
    node _T_114 = eq(_T_113, UInt<1>("h00")) @[BusyBit.scala 40:57]
    when _T_114 : @[BusyBit.scala 40:57]
      printf(clock, UInt<1>(1), "%d, ", busy_bit[7]) @[BusyBit.scala 40:57]
      skip @[BusyBit.scala 40:57]
    node _T_115 = asUInt(reset) @[BusyBit.scala 40:86]
    node _T_116 = eq(_T_115, UInt<1>("h00")) @[BusyBit.scala 40:86]
    when _T_116 : @[BusyBit.scala 40:86]
      printf(clock, UInt<1>(1), "\n") @[BusyBit.scala 40:86]
      skip @[BusyBit.scala 40:86]
    busy_bit[0] <= UInt<1>("h00") @[BusyBit.scala 43:15]
    
  module ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip predict : UInt<1>, flip branch_mispredicted : UInt<1>, flip branch_graduated : UInt<1>, flip if_out : {pc : UInt<16>, total_cnt : UInt<16>, inst_bits : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>}}, flip commit : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[2], flip unreserved_head : {valid : UInt<1>, bits : UInt<4>}[1], used_num : UInt<1>, jump_pc : UInt<16>, next_pc : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, source : UInt<16>[2], rd : UInt<16>, stall : UInt<1>, pc : UInt<16>, rf4debug : UInt<16>[8]}
    
    wire if_out : {pc : UInt<16>, total_cnt : UInt<16>, inst_bits : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>}} @[ID.scala 36:27]
    reg if_out_r : {pc : UInt<16>, total_cnt : UInt<16>, inst_bits : {op : UInt<4>, rd : UInt<3>, rs : UInt<3>, disp6u : UInt<6>}}, clock @[ID.scala 37:32]
    if_out_r.inst_bits.disp6u <= if_out.inst_bits.disp6u @[ID.scala 37:32]
    if_out_r.inst_bits.rs <= if_out.inst_bits.rs @[ID.scala 37:32]
    if_out_r.inst_bits.rd <= if_out.inst_bits.rd @[ID.scala 37:32]
    if_out_r.inst_bits.op <= if_out.inst_bits.op @[ID.scala 37:32]
    if_out_r.total_cnt <= if_out.total_cnt @[ID.scala 37:32]
    if_out_r.pc <= if_out.pc @[ID.scala 37:32]
    node _T = mux(io.stall, if_out_r, io.if_out) @[ID.scala 38:16]
    if_out.inst_bits.disp6u <= _T.inst_bits.disp6u @[ID.scala 38:10]
    if_out.inst_bits.rs <= _T.inst_bits.rs @[ID.scala 38:10]
    if_out.inst_bits.rd <= _T.inst_bits.rd @[ID.scala 38:10]
    if_out.inst_bits.op <= _T.inst_bits.op @[ID.scala 38:10]
    if_out.total_cnt <= _T.total_cnt @[ID.scala 38:10]
    if_out.pc <= _T.pc @[ID.scala 38:10]
    wire predict : UInt<1> @[ID.scala 40:27]
    reg predict_r : UInt<1>, clock @[ID.scala 41:32]
    predict_r <= predict @[ID.scala 41:32]
    node _T_1 = mux(io.stall, predict_r, io.predict) @[ID.scala 42:17]
    predict <= _T_1 @[ID.scala 42:11]
    wire stall : UInt<1> @[ID.scala 47:25]
    inst decoder of Decoder @[ID.scala 49:32]
    decoder.clock <= clock
    decoder.reset <= reset
    decoder.io.inst_bits.disp6u <= if_out.inst_bits.disp6u @[ID.scala 50:24]
    decoder.io.inst_bits.rs <= if_out.inst_bits.rs @[ID.scala 50:24]
    decoder.io.inst_bits.rd <= if_out.inst_bits.rd @[ID.scala 50:24]
    decoder.io.inst_bits.op <= if_out.inst_bits.op @[ID.scala 50:24]
    inst reg_file of RegisterFile @[ID.scala 52:38]
    reg_file.clock <= clock
    reg_file.reset <= reset
    reg_file.io.read_addr[0] <= if_out.inst_bits.rd @[ID.scala 53:28]
    reg_file.io.read_addr[1] <= if_out.inst_bits.rs @[ID.scala 54:28]
    reg_file.io.write[0].data <= io.commit[0].data @[ID.scala 55:21]
    reg_file.io.write[0].rf_w <= io.commit[0].rf_w @[ID.scala 55:21]
    reg_file.io.write[0].rd_addr <= io.commit[0].rd_addr @[ID.scala 55:21]
    reg_file.io.write[1].data <= io.commit[1].data @[ID.scala 55:21]
    reg_file.io.write[1].rf_w <= io.commit[1].rf_w @[ID.scala 55:21]
    reg_file.io.write[1].rd_addr <= io.commit[1].rd_addr @[ID.scala 55:21]
    inst busy_bit of BusyBit @[ID.scala 57:33]
    busy_bit.clock <= clock
    busy_bit.reset <= reset
    busy_bit.io.branch_mispredicted <= io.branch_mispredicted @[ID.scala 58:35]
    busy_bit.io.branch_graduated <= io.branch_graduated @[ID.scala 59:32]
    busy_bit.io.release[0].data <= io.commit[0].data @[ID.scala 60:23]
    busy_bit.io.release[0].rf_w <= io.commit[0].rf_w @[ID.scala 60:23]
    busy_bit.io.release[0].rd_addr <= io.commit[0].rd_addr @[ID.scala 60:23]
    busy_bit.io.release[1].data <= io.commit[1].data @[ID.scala 60:23]
    busy_bit.io.release[1].rf_w <= io.commit[1].rf_w @[ID.scala 60:23]
    busy_bit.io.release[1].rd_addr <= io.commit[1].rd_addr @[ID.scala 60:23]
    busy_bit.io.req_rs_addr[0] <= if_out.inst_bits.rd @[ID.scala 61:30]
    busy_bit.io.req_rs_addr[1] <= if_out.inst_bits.rs @[ID.scala 62:30]
    wire clear_instruction : UInt<1> @[ID.scala 64:37]
    node _T_2 = eq(clear_instruction, UInt<1>("h00")) @[ID.scala 65:27]
    node _T_3 = eq(stall, UInt<1>("h00")) @[ID.scala 65:49]
    node _T_4 = and(_T_2, _T_3) @[ID.scala 65:46]
    node _T_5 = and(_T_4, decoder.io.ctrl.rf_w) @[ID.scala 65:56]
    busy_bit.io.req_rd_w <= _T_5 @[ID.scala 65:24]
    busy_bit.io.req_rd_addr <= if_out.inst_bits.rd @[ID.scala 66:27]
    node _T_6 = eq(clear_instruction, UInt<1>("h00")) @[ID.scala 75:17]
    node _T_7 = and(_T_6, decoder.io.ctrl.is_jump) @[ID.scala 75:36]
    reg _T_8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 75:16]
    _T_8 <= _T_7 @[ID.scala 75:16]
    node _T_9 = or(io.branch_mispredicted, _T_8) @[ID.scala 75:5]
    node _T_10 = eq(clear_instruction, UInt<1>("h00")) @[ID.scala 76:17]
    node _T_11 = and(_T_10, decoder.io.ctrl.is_branch) @[ID.scala 76:36]
    reg _T_12 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 76:16]
    _T_12 <= _T_11 @[ID.scala 76:16]
    node _T_13 = and(_T_12, predict) @[ID.scala 76:75]
    node _T_14 = or(_T_9, _T_13) @[ID.scala 76:5]
    when _T_14 : @[ID.scala 77:5]
      clear_instruction <= UInt<1>("h01") @[ID.scala 78:23]
      skip @[ID.scala 77:5]
    else : @[ID.scala 79:16]
      clear_instruction <= UInt<1>("h00") @[ID.scala 80:23]
      skip @[ID.scala 79:16]
    node _T_15 = eq(decoder.io.ctrl.rs1_use, UInt<1>("h00")) @[ID.scala 85:37]
    node _T_16 = or(busy_bit.io.rs_available[0], _T_15) @[ID.scala 85:34]
    node _T_17 = eq(decoder.io.ctrl.rs2_use, UInt<1>("h00")) @[ID.scala 86:37]
    node _T_18 = or(busy_bit.io.rs_available[1], _T_17) @[ID.scala 86:34]
    node operands_available = and(_T_16, _T_18) @[ID.scala 85:63]
    wire rob_available : UInt<1>[1] @[ID.scala 89:38]
    rob_available[0] <= io.unreserved_head[0].valid @[ID.scala 90:20]
    node _T_19 = eq(operands_available, UInt<1>("h00")) @[ID.scala 96:44]
    node _T_20 = eq(rob_available[0], UInt<1>("h00")) @[ID.scala 96:67]
    node _T_21 = or(_T_19, _T_20) @[ID.scala 96:64]
    node _T_22 = mux(clear_instruction, UInt<1>("h00"), _T_21) @[ID.scala 96:15]
    stall <= _T_22 @[ID.scala 96:9]
    reg _T_23 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 97:22]
    _T_23 <= stall @[ID.scala 97:22]
    io.stall <= _T_23 @[ID.scala 97:12]
    node _T_24 = or(stall, clear_instruction) @[ID.scala 101:11]
    node _T_25 = eq(if_out.inst_bits.op, UInt<1>("h00")) @[ID.scala 101:55]
    node _T_26 = or(_T_24, _T_25) @[ID.scala 101:32]
    node _T_27 = mux(_T_26, UInt<1>("h00"), UInt<1>("h01")) @[ID.scala 100:29]
    reg _T_28 : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[ID.scala 100:25]
    _T_28 <= _T_27 @[ID.scala 100:25]
    io.used_num <= _T_28 @[ID.scala 100:15]
    node _T_29 = or(stall, clear_instruction) @[ID.scala 107:13]
    node _T_30 = eq(if_out.inst_bits.op, UInt<1>("h00")) @[ID.scala 107:57]
    node _T_31 = or(_T_29, _T_30) @[ID.scala 107:34]
    node _T_32 = eq(_T_31, UInt<1>("h00")) @[ID.scala 107:5]
    wire _T_33 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_33.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_33.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_33.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_33.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_33.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_34 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_34.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_34.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_34.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_34.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_34.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_34.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_34.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_34.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_33.ctrl.rs2_use <= _T_34.rs2_use @[InstInfo.scala 25:12]
    _T_33.ctrl.rs1_use <= _T_34.rs1_use @[InstInfo.scala 25:12]
    _T_33.ctrl.mem_w <= _T_34.mem_w @[InstInfo.scala 25:12]
    _T_33.ctrl.mem_r <= _T_34.mem_r @[InstInfo.scala 25:12]
    _T_33.ctrl.rf_w <= _T_34.rf_w @[InstInfo.scala 25:12]
    _T_33.ctrl.is_branch <= _T_34.is_branch @[InstInfo.scala 25:12]
    _T_33.ctrl.is_jump <= _T_34.is_jump @[InstInfo.scala 25:12]
    _T_33.ctrl.alu_op <= _T_34.alu_op @[InstInfo.scala 25:12]
    reg _T_35 : UInt<1>, clock with : (reset => (reset, _T_33.valid)) @[ID.scala 106:32]
    _T_35 <= _T_32 @[ID.scala 106:32]
    io.inst_info.valid <= _T_35 @[ID.scala 106:22]
    wire _T_36 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_36.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_36.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_36.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_36.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_36.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_37 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_37.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_37.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_37.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_37.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_37.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_37.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_37.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_37.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_36.ctrl.rs2_use <= _T_37.rs2_use @[InstInfo.scala 25:12]
    _T_36.ctrl.rs1_use <= _T_37.rs1_use @[InstInfo.scala 25:12]
    _T_36.ctrl.mem_w <= _T_37.mem_w @[InstInfo.scala 25:12]
    _T_36.ctrl.mem_r <= _T_37.mem_r @[InstInfo.scala 25:12]
    _T_36.ctrl.rf_w <= _T_37.rf_w @[InstInfo.scala 25:12]
    _T_36.ctrl.is_branch <= _T_37.is_branch @[InstInfo.scala 25:12]
    _T_36.ctrl.is_jump <= _T_37.is_jump @[InstInfo.scala 25:12]
    _T_36.ctrl.alu_op <= _T_37.alu_op @[InstInfo.scala 25:12]
    reg _T_38 : UInt, clock with : (reset => (reset, _T_36.pc)) @[ID.scala 110:29]
    _T_38 <= if_out.pc @[ID.scala 110:29]
    io.inst_info.pc <= _T_38 @[ID.scala 110:19]
    wire _T_39 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_39.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_39.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_39.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_39.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_39.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_40 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_40.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_40.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_40.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_40.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_40.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_40.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_40.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_40.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_39.ctrl.rs2_use <= _T_40.rs2_use @[InstInfo.scala 25:12]
    _T_39.ctrl.rs1_use <= _T_40.rs1_use @[InstInfo.scala 25:12]
    _T_39.ctrl.mem_w <= _T_40.mem_w @[InstInfo.scala 25:12]
    _T_39.ctrl.mem_r <= _T_40.mem_r @[InstInfo.scala 25:12]
    _T_39.ctrl.rf_w <= _T_40.rf_w @[InstInfo.scala 25:12]
    _T_39.ctrl.is_branch <= _T_40.is_branch @[InstInfo.scala 25:12]
    _T_39.ctrl.is_jump <= _T_40.is_jump @[InstInfo.scala 25:12]
    _T_39.ctrl.alu_op <= _T_40.alu_op @[InstInfo.scala 25:12]
    reg _T_41 : UInt, clock with : (reset => (reset, _T_39.total_cnt)) @[ID.scala 111:36]
    _T_41 <= if_out.total_cnt @[ID.scala 111:36]
    io.inst_info.total_cnt <= _T_41 @[ID.scala 111:26]
    wire _T_42 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_42.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_42.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_42.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_42.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_42.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_43 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_43.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_43.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_43.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_43.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_43.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_43.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_43.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_43.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_42.ctrl.rs2_use <= _T_43.rs2_use @[InstInfo.scala 25:12]
    _T_42.ctrl.rs1_use <= _T_43.rs1_use @[InstInfo.scala 25:12]
    _T_42.ctrl.mem_w <= _T_43.mem_w @[InstInfo.scala 25:12]
    _T_42.ctrl.mem_r <= _T_43.mem_r @[InstInfo.scala 25:12]
    _T_42.ctrl.rf_w <= _T_43.rf_w @[InstInfo.scala 25:12]
    _T_42.ctrl.is_branch <= _T_43.is_branch @[InstInfo.scala 25:12]
    _T_42.ctrl.is_jump <= _T_43.is_jump @[InstInfo.scala 25:12]
    _T_42.ctrl.alu_op <= _T_43.alu_op @[InstInfo.scala 25:12]
    reg _T_44 : UInt, clock with : (reset => (reset, _T_42.rd_addr)) @[ID.scala 112:34]
    _T_44 <= if_out.inst_bits.rd @[ID.scala 112:34]
    io.inst_info.rd_addr <= _T_44 @[ID.scala 112:24]
    io.inst_info.rob_addr <= io.unreserved_head[0].bits @[ID.scala 113:25]
    node _T_45 = or(stall, clear_instruction) @[ID.scala 115:15]
    wire _T_46 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_46.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_46.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_46.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_46.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_46.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_47 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_47.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_47.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_47.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_47.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_47.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_47.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_47.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_47.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_46.ctrl.rs2_use <= _T_47.rs2_use @[InstInfo.scala 25:12]
    _T_46.ctrl.rs1_use <= _T_47.rs1_use @[InstInfo.scala 25:12]
    _T_46.ctrl.mem_w <= _T_47.mem_w @[InstInfo.scala 25:12]
    _T_46.ctrl.mem_r <= _T_47.mem_r @[InstInfo.scala 25:12]
    _T_46.ctrl.rf_w <= _T_47.rf_w @[InstInfo.scala 25:12]
    _T_46.ctrl.is_branch <= _T_47.is_branch @[InstInfo.scala 25:12]
    _T_46.ctrl.is_jump <= _T_47.is_jump @[InstInfo.scala 25:12]
    _T_46.ctrl.alu_op <= _T_47.alu_op @[InstInfo.scala 25:12]
    node _T_48 = mux(_T_45, _T_46.ctrl, decoder.io.ctrl) @[ID.scala 115:8]
    wire _T_49 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_49.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_49.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_49.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_49.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_49.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_50 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_50.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_50.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_50.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_50.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_50.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_50.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_50.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_50.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_49.ctrl.rs2_use <= _T_50.rs2_use @[InstInfo.scala 25:12]
    _T_49.ctrl.rs1_use <= _T_50.rs1_use @[InstInfo.scala 25:12]
    _T_49.ctrl.mem_w <= _T_50.mem_w @[InstInfo.scala 25:12]
    _T_49.ctrl.mem_r <= _T_50.mem_r @[InstInfo.scala 25:12]
    _T_49.ctrl.rf_w <= _T_50.rf_w @[InstInfo.scala 25:12]
    _T_49.ctrl.is_branch <= _T_50.is_branch @[InstInfo.scala 25:12]
    _T_49.ctrl.is_jump <= _T_50.is_jump @[InstInfo.scala 25:12]
    _T_49.ctrl.alu_op <= _T_50.alu_op @[InstInfo.scala 25:12]
    reg _T_51 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}, clock with : (reset => (reset, _T_49.ctrl)) @[ID.scala 114:31]
    _T_51.rs2_use <= _T_48.rs2_use @[ID.scala 114:31]
    _T_51.rs1_use <= _T_48.rs1_use @[ID.scala 114:31]
    _T_51.mem_w <= _T_48.mem_w @[ID.scala 114:31]
    _T_51.mem_r <= _T_48.mem_r @[ID.scala 114:31]
    _T_51.rf_w <= _T_48.rf_w @[ID.scala 114:31]
    _T_51.is_branch <= _T_48.is_branch @[ID.scala 114:31]
    _T_51.is_jump <= _T_48.is_jump @[ID.scala 114:31]
    _T_51.alu_op <= _T_48.alu_op @[ID.scala 114:31]
    io.inst_info.ctrl.rs2_use <= _T_51.rs2_use @[ID.scala 114:21]
    io.inst_info.ctrl.rs1_use <= _T_51.rs1_use @[ID.scala 114:21]
    io.inst_info.ctrl.mem_w <= _T_51.mem_w @[ID.scala 114:21]
    io.inst_info.ctrl.mem_r <= _T_51.mem_r @[ID.scala 114:21]
    io.inst_info.ctrl.rf_w <= _T_51.rf_w @[ID.scala 114:21]
    io.inst_info.ctrl.is_branch <= _T_51.is_branch @[ID.scala 114:21]
    io.inst_info.ctrl.is_jump <= _T_51.is_jump @[ID.scala 114:21]
    io.inst_info.ctrl.alu_op <= _T_51.alu_op @[ID.scala 114:21]
    node _T_52 = cat(if_out.inst_bits.rs, if_out.inst_bits.disp6u) @[Cat.scala 29:58]
    wire _T_53 : {h : UInt<1>, t : UInt<8>} @[InstBits.scala 18:43]
    wire _T_54 : UInt<9>
    _T_54 <= _T_52
    node _T_55 = bits(_T_54, 7, 0) @[InstBits.scala 18:43]
    _T_53.t <= _T_55 @[InstBits.scala 18:43]
    node _T_56 = bits(_T_54, 8, 8) @[InstBits.scala 18:43]
    _T_53.h <= _T_56 @[InstBits.scala 18:43]
    node _T_57 = mux(_T_53.h, UInt<7>("h07f"), UInt<1>("h00")) @[InstBits.scala 18:28]
    node _T_58 = cat(if_out.inst_bits.rs, if_out.inst_bits.disp6u) @[Cat.scala 29:58]
    node _T_59 = cat(_T_57, _T_58) @[Cat.scala 29:58]
    node _T_60 = add(if_out.pc, _T_59) @[ID.scala 120:15]
    node _T_61 = tail(_T_60, 1) @[ID.scala 120:15]
    wire _T_62 : {h : UInt<1>, t : UInt<5>} @[InstBits.scala 16:45]
    wire _T_63 : UInt<6>
    _T_63 <= if_out.inst_bits.disp6u
    node _T_64 = bits(_T_63, 4, 0) @[InstBits.scala 16:45]
    _T_62.t <= _T_64 @[InstBits.scala 16:45]
    node _T_65 = bits(_T_63, 5, 5) @[InstBits.scala 16:45]
    _T_62.h <= _T_65 @[InstBits.scala 16:45]
    node _T_66 = mux(_T_62.h, UInt<10>("h03ff"), UInt<1>("h00")) @[InstBits.scala 16:29]
    node _T_67 = cat(_T_66, if_out.inst_bits.disp6u) @[Cat.scala 29:58]
    node _T_68 = add(if_out.pc, _T_67) @[ID.scala 120:51]
    node _T_69 = tail(_T_68, 1) @[ID.scala 120:51]
    node _T_70 = mux(decoder.io.ctrl.is_jump, _T_61, _T_69) @[ID.scala 119:28]
    reg _T_71 : UInt, clock @[ID.scala 119:24]
    _T_71 <= _T_70 @[ID.scala 119:24]
    io.jump_pc <= _T_71 @[ID.scala 119:14]
    node _T_72 = add(if_out.pc, UInt<1>("h01")) @[ID.scala 122:35]
    node _T_73 = tail(_T_72, 1) @[ID.scala 122:35]
    reg _T_74 : UInt, clock @[ID.scala 122:24]
    _T_74 <= _T_73 @[ID.scala 122:24]
    io.next_pc <= _T_74 @[ID.scala 122:14]
    node _T_75 = eq(UInt<1>("h00"), decoder.io.source_sel[0]) @[Mux.scala 68:19]
    node _T_76 = mux(_T_75, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_77 = eq(UInt<1>("h01"), decoder.io.source_sel[0]) @[Mux.scala 68:19]
    node _T_78 = mux(_T_77, reg_file.io.out[0], _T_76) @[Mux.scala 68:16]
    node _T_79 = eq(UInt<2>("h03"), decoder.io.source_sel[0]) @[Mux.scala 68:19]
    node _T_80 = mux(_T_79, if_out.inst_bits.disp6u, _T_78) @[Mux.scala 68:16]
    reg _T_81 : UInt, clock @[ID.scala 124:26]
    _T_81 <= _T_80 @[ID.scala 124:26]
    io.source[0] <= _T_81 @[ID.scala 124:16]
    node _T_82 = cat(if_out.inst_bits.rs, if_out.inst_bits.disp6u) @[Cat.scala 29:58]
    wire _T_83 : {h : UInt<1>, t : UInt<8>} @[InstBits.scala 18:43]
    wire _T_84 : UInt<9>
    _T_84 <= _T_82
    node _T_85 = bits(_T_84, 7, 0) @[InstBits.scala 18:43]
    _T_83.t <= _T_85 @[InstBits.scala 18:43]
    node _T_86 = bits(_T_84, 8, 8) @[InstBits.scala 18:43]
    _T_83.h <= _T_86 @[InstBits.scala 18:43]
    node _T_87 = mux(_T_83.h, UInt<7>("h07f"), UInt<1>("h00")) @[InstBits.scala 18:28]
    node _T_88 = cat(if_out.inst_bits.rs, if_out.inst_bits.disp6u) @[Cat.scala 29:58]
    node _T_89 = cat(_T_87, _T_88) @[Cat.scala 29:58]
    node _T_90 = eq(UInt<1>("h00"), decoder.io.source_sel[1]) @[Mux.scala 68:19]
    node _T_91 = mux(_T_90, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_92 = eq(UInt<1>("h01"), decoder.io.source_sel[1]) @[Mux.scala 68:19]
    node _T_93 = mux(_T_92, reg_file.io.out[1], _T_91) @[Mux.scala 68:16]
    node _T_94 = eq(UInt<2>("h02"), decoder.io.source_sel[1]) @[Mux.scala 68:19]
    node _T_95 = mux(_T_94, _T_89, _T_93) @[Mux.scala 68:16]
    reg _T_96 : UInt, clock @[ID.scala 129:26]
    _T_96 <= _T_95 @[ID.scala 129:26]
    io.source[1] <= _T_96 @[ID.scala 129:16]
    reg _T_97 : UInt, clock @[ID.scala 134:19]
    _T_97 <= reg_file.io.out[0] @[ID.scala 134:19]
    io.rd <= _T_97 @[ID.scala 134:9]
    reg _T_98 : UInt, clock @[ID.scala 135:19]
    _T_98 <= if_out.pc @[ID.scala 135:19]
    io.pc <= _T_98 @[ID.scala 135:9]
    node _T_99 = asUInt(reset) @[ID.scala 137:9]
    node _T_100 = eq(_T_99, UInt<1>("h00")) @[ID.scala 137:9]
    when _T_100 : @[ID.scala 137:9]
      printf(clock, UInt<1>(1), "branch_mispredicted_enable: %d, branch_mispredicted: %d\n", io.branch_graduated, io.branch_mispredicted) @[ID.scala 137:9]
      skip @[ID.scala 137:9]
    node _T_101 = eq(operands_available, UInt<1>("h00")) @[ID.scala 138:72]
    node _T_102 = eq(rob_available[0], UInt<1>("h00")) @[ID.scala 138:93]
    node _T_103 = asUInt(reset) @[ID.scala 138:9]
    node _T_104 = eq(_T_103, UInt<1>("h00")) @[ID.scala 138:9]
    when _T_104 : @[ID.scala 138:9]
      printf(clock, UInt<1>(1), "stall: %d, !operands_avail: %d, !rob_avail(0): %d\n", stall, _T_101, _T_102) @[ID.scala 138:9]
      skip @[ID.scala 138:9]
    node _T_105 = asUInt(reset) @[ID.scala 140:9]
    node _T_106 = eq(_T_105, UInt<1>("h00")) @[ID.scala 140:9]
    when _T_106 : @[ID.scala 140:9]
      printf(clock, UInt<1>(1), "source(0): %d\n", io.source[0]) @[ID.scala 140:9]
      skip @[ID.scala 140:9]
    node _T_107 = asUInt(reset) @[ID.scala 141:9]
    node _T_108 = eq(_T_107, UInt<1>("h00")) @[ID.scala 141:9]
    when _T_108 : @[ID.scala 141:9]
      printf(clock, UInt<1>(1), "source(1): %d\n", io.source[1]) @[ID.scala 141:9]
      skip @[ID.scala 141:9]
    node _T_109 = asUInt(reset) @[ID.scala 142:9]
    node _T_110 = eq(_T_109, UInt<1>("h00")) @[ID.scala 142:9]
    when _T_110 : @[ID.scala 142:9]
      printf(clock, UInt<1>(1), "next_addr: %d\n", io.jump_pc) @[ID.scala 142:9]
      skip @[ID.scala 142:9]
    node _T_111 = asUInt(reset) @[ID.scala 143:9]
    node _T_112 = eq(_T_111, UInt<1>("h00")) @[ID.scala 143:9]
    when _T_112 : @[ID.scala 143:9]
      printf(clock, UInt<1>(1), "----------\n") @[ID.scala 143:9]
      skip @[ID.scala 143:9]
    io.rf4debug[0] <= reg_file.io.rf4debug[0] @[ID.scala 145:15]
    io.rf4debug[1] <= reg_file.io.rf4debug[1] @[ID.scala 145:15]
    io.rf4debug[2] <= reg_file.io.rf4debug[2] @[ID.scala 145:15]
    io.rf4debug[3] <= reg_file.io.rf4debug[3] @[ID.scala 145:15]
    io.rf4debug[4] <= reg_file.io.rf4debug[4] @[ID.scala 145:15]
    io.rf4debug[5] <= reg_file.io.rf4debug[5] @[ID.scala 145:15]
    io.rf4debug[6] <= reg_file.io.rf4debug[6] @[ID.scala 145:15]
    io.rf4debug[7] <= reg_file.io.rf4debug[7] @[ID.scala 145:15]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, flip source : UInt<16>[2], flip source_enable : UInt<1>, flip next_pc : UInt<16>, flip branch_pc : UInt<16>, flip rd : UInt<16>, flip predict : UInt<1>, flip pc : UInt<16>, alu_out : UInt<16>, inst_info_out : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, restoration_pc : UInt<16>, rd_out : UInt<16>, pc_out : UInt<16>, mispredicted : UInt<1>}
    
    node _T = add(io.source[0], io.source[1]) @[ALU.scala 29:34]
    node _T_1 = tail(_T, 1) @[ALU.scala 29:34]
    node _T_2 = sub(io.source[0], io.source[1]) @[ALU.scala 30:34]
    node _T_3 = tail(_T_2, 1) @[ALU.scala 30:34]
    node _T_4 = and(io.source[0], io.source[1]) @[ALU.scala 31:34]
    node _T_5 = or(io.source[0], io.source[1]) @[ALU.scala 32:34]
    node _T_6 = eq(io.source[0], io.source[1]) @[ALU.scala 33:37]
    node _T_7 = gt(io.source[0], io.source[1]) @[ALU.scala 34:35]
    node _T_8 = eq(UInt<3>("h05"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node _T_9 = mux(_T_8, _T_7, UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_10 = eq(UInt<3>("h04"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node _T_11 = mux(_T_10, _T_6, _T_9) @[Mux.scala 68:16]
    node _T_12 = eq(UInt<2>("h03"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node _T_13 = mux(_T_12, _T_5, _T_11) @[Mux.scala 68:16]
    node _T_14 = eq(UInt<2>("h02"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node _T_15 = mux(_T_14, _T_4, _T_13) @[Mux.scala 68:16]
    node _T_16 = eq(UInt<1>("h01"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node _T_17 = mux(_T_16, _T_3, _T_15) @[Mux.scala 68:16]
    node _T_18 = eq(UInt<1>("h00"), io.inst_info.ctrl.alu_op) @[Mux.scala 68:19]
    node alu_out = mux(_T_18, _T_1, _T_17) @[Mux.scala 68:16]
    reg _T_19 : UInt, clock @[ALU.scala 36:24]
    _T_19 <= alu_out @[ALU.scala 36:24]
    io.alu_out <= _T_19 @[ALU.scala 36:14]
    wire _T_20 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_20.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_20.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_20.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_20.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_20.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_21 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_21.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_21.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_21.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_21.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_21.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_21.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_21.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_21.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_20.ctrl.rs2_use <= _T_21.rs2_use @[InstInfo.scala 25:12]
    _T_20.ctrl.rs1_use <= _T_21.rs1_use @[InstInfo.scala 25:12]
    _T_20.ctrl.mem_w <= _T_21.mem_w @[InstInfo.scala 25:12]
    _T_20.ctrl.mem_r <= _T_21.mem_r @[InstInfo.scala 25:12]
    _T_20.ctrl.rf_w <= _T_21.rf_w @[InstInfo.scala 25:12]
    _T_20.ctrl.is_branch <= _T_21.is_branch @[InstInfo.scala 25:12]
    _T_20.ctrl.is_jump <= _T_21.is_jump @[InstInfo.scala 25:12]
    _T_20.ctrl.alu_op <= _T_21.alu_op @[InstInfo.scala 25:12]
    reg _T_22 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, clock with : (reset => (reset, _T_20)) @[ALU.scala 37:30]
    _T_22.ctrl.rs2_use <= io.inst_info.ctrl.rs2_use @[ALU.scala 37:30]
    _T_22.ctrl.rs1_use <= io.inst_info.ctrl.rs1_use @[ALU.scala 37:30]
    _T_22.ctrl.mem_w <= io.inst_info.ctrl.mem_w @[ALU.scala 37:30]
    _T_22.ctrl.mem_r <= io.inst_info.ctrl.mem_r @[ALU.scala 37:30]
    _T_22.ctrl.rf_w <= io.inst_info.ctrl.rf_w @[ALU.scala 37:30]
    _T_22.ctrl.is_branch <= io.inst_info.ctrl.is_branch @[ALU.scala 37:30]
    _T_22.ctrl.is_jump <= io.inst_info.ctrl.is_jump @[ALU.scala 37:30]
    _T_22.ctrl.alu_op <= io.inst_info.ctrl.alu_op @[ALU.scala 37:30]
    _T_22.rob_addr <= io.inst_info.rob_addr @[ALU.scala 37:30]
    _T_22.rd_addr <= io.inst_info.rd_addr @[ALU.scala 37:30]
    _T_22.total_cnt <= io.inst_info.total_cnt @[ALU.scala 37:30]
    _T_22.pc <= io.inst_info.pc @[ALU.scala 37:30]
    _T_22.valid <= io.inst_info.valid @[ALU.scala 37:30]
    io.inst_info_out.ctrl.rs2_use <= _T_22.ctrl.rs2_use @[ALU.scala 37:20]
    io.inst_info_out.ctrl.rs1_use <= _T_22.ctrl.rs1_use @[ALU.scala 37:20]
    io.inst_info_out.ctrl.mem_w <= _T_22.ctrl.mem_w @[ALU.scala 37:20]
    io.inst_info_out.ctrl.mem_r <= _T_22.ctrl.mem_r @[ALU.scala 37:20]
    io.inst_info_out.ctrl.rf_w <= _T_22.ctrl.rf_w @[ALU.scala 37:20]
    io.inst_info_out.ctrl.is_branch <= _T_22.ctrl.is_branch @[ALU.scala 37:20]
    io.inst_info_out.ctrl.is_jump <= _T_22.ctrl.is_jump @[ALU.scala 37:20]
    io.inst_info_out.ctrl.alu_op <= _T_22.ctrl.alu_op @[ALU.scala 37:20]
    io.inst_info_out.rob_addr <= _T_22.rob_addr @[ALU.scala 37:20]
    io.inst_info_out.rd_addr <= _T_22.rd_addr @[ALU.scala 37:20]
    io.inst_info_out.total_cnt <= _T_22.total_cnt @[ALU.scala 37:20]
    io.inst_info_out.pc <= _T_22.pc @[ALU.scala 37:20]
    io.inst_info_out.valid <= _T_22.valid @[ALU.scala 37:20]
    node _T_23 = mux(io.predict, io.next_pc, io.branch_pc) @[ALU.scala 38:35]
    reg _T_24 : UInt, clock @[ALU.scala 38:31]
    _T_24 <= _T_23 @[ALU.scala 38:31]
    io.restoration_pc <= _T_24 @[ALU.scala 38:21]
    reg _T_25 : UInt, clock @[ALU.scala 42:23]
    _T_25 <= io.rd @[ALU.scala 42:23]
    io.rd_out <= _T_25 @[ALU.scala 42:13]
    reg _T_26 : UInt, clock @[ALU.scala 43:23]
    _T_26 <= io.pc @[ALU.scala 43:23]
    io.pc_out <= _T_26 @[ALU.scala 43:13]
    node _T_27 = neq(io.predict, alu_out) @[ALU.scala 44:73]
    node _T_28 = and(io.inst_info.ctrl.is_branch, _T_27) @[ALU.scala 44:58]
    reg _T_29 : UInt<1>, clock @[ALU.scala 44:29]
    _T_29 <= _T_28 @[ALU.scala 44:29]
    io.mispredicted <= _T_29 @[ALU.scala 44:19]
    
  module EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, flip source : UInt<16>[2], flip branch_pc : UInt<16>, flip next_pc : UInt<16>, flip rd : UInt<16>, flip predict : UInt<1>, flip pc : UInt<16>, alu_out : UInt<16>, inst_info_out : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, restoration_pc_out : UInt<16>, rd_out : UInt<16>, pc_out : UInt<16>, mispredicted : UInt<1>}
    
    inst alu of ALU @[EX.scala 30:24]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.inst_info.ctrl.rs2_use <= io.inst_info.ctrl.rs2_use @[EX.scala 31:20]
    alu.io.inst_info.ctrl.rs1_use <= io.inst_info.ctrl.rs1_use @[EX.scala 31:20]
    alu.io.inst_info.ctrl.mem_w <= io.inst_info.ctrl.mem_w @[EX.scala 31:20]
    alu.io.inst_info.ctrl.mem_r <= io.inst_info.ctrl.mem_r @[EX.scala 31:20]
    alu.io.inst_info.ctrl.rf_w <= io.inst_info.ctrl.rf_w @[EX.scala 31:20]
    alu.io.inst_info.ctrl.is_branch <= io.inst_info.ctrl.is_branch @[EX.scala 31:20]
    alu.io.inst_info.ctrl.is_jump <= io.inst_info.ctrl.is_jump @[EX.scala 31:20]
    alu.io.inst_info.ctrl.alu_op <= io.inst_info.ctrl.alu_op @[EX.scala 31:20]
    alu.io.inst_info.rob_addr <= io.inst_info.rob_addr @[EX.scala 31:20]
    alu.io.inst_info.rd_addr <= io.inst_info.rd_addr @[EX.scala 31:20]
    alu.io.inst_info.total_cnt <= io.inst_info.total_cnt @[EX.scala 31:20]
    alu.io.inst_info.pc <= io.inst_info.pc @[EX.scala 31:20]
    alu.io.inst_info.valid <= io.inst_info.valid @[EX.scala 31:20]
    alu.io.source[0] <= io.source[0] @[EX.scala 32:17]
    alu.io.source[1] <= io.source[1] @[EX.scala 32:17]
    alu.io.next_pc <= io.next_pc @[EX.scala 33:18]
    alu.io.branch_pc <= io.branch_pc @[EX.scala 34:20]
    alu.io.rd <= io.rd @[EX.scala 35:13]
    alu.io.predict <= io.predict @[EX.scala 36:18]
    alu.io.pc <= io.pc @[EX.scala 37:13]
    alu.io.source_enable <= UInt<1>("h01") @[EX.scala 39:24]
    io.alu_out <= alu.io.alu_out @[EX.scala 40:14]
    io.inst_info_out.ctrl.rs2_use <= alu.io.inst_info_out.ctrl.rs2_use @[EX.scala 41:20]
    io.inst_info_out.ctrl.rs1_use <= alu.io.inst_info_out.ctrl.rs1_use @[EX.scala 41:20]
    io.inst_info_out.ctrl.mem_w <= alu.io.inst_info_out.ctrl.mem_w @[EX.scala 41:20]
    io.inst_info_out.ctrl.mem_r <= alu.io.inst_info_out.ctrl.mem_r @[EX.scala 41:20]
    io.inst_info_out.ctrl.rf_w <= alu.io.inst_info_out.ctrl.rf_w @[EX.scala 41:20]
    io.inst_info_out.ctrl.is_branch <= alu.io.inst_info_out.ctrl.is_branch @[EX.scala 41:20]
    io.inst_info_out.ctrl.is_jump <= alu.io.inst_info_out.ctrl.is_jump @[EX.scala 41:20]
    io.inst_info_out.ctrl.alu_op <= alu.io.inst_info_out.ctrl.alu_op @[EX.scala 41:20]
    io.inst_info_out.rob_addr <= alu.io.inst_info_out.rob_addr @[EX.scala 41:20]
    io.inst_info_out.rd_addr <= alu.io.inst_info_out.rd_addr @[EX.scala 41:20]
    io.inst_info_out.total_cnt <= alu.io.inst_info_out.total_cnt @[EX.scala 41:20]
    io.inst_info_out.pc <= alu.io.inst_info_out.pc @[EX.scala 41:20]
    io.inst_info_out.valid <= alu.io.inst_info_out.valid @[EX.scala 41:20]
    io.restoration_pc_out <= alu.io.restoration_pc @[EX.scala 42:25]
    io.rd_out <= alu.io.rd_out @[EX.scala 43:13]
    io.pc_out <= alu.io.pc_out @[EX.scala 44:13]
    io.mispredicted <= alu.io.mispredicted @[EX.scala 45:19]
    
  module IM : 
    input clock : Clock
    input reset : Reset
    output io : {flip inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, flip rd_out : UInt<4>, flip alu_out : UInt<4>, mem_out : UInt<16>, inst_info_out : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}}
    
    cmem mem : UInt<16>[128] @[IM.scala 18:27]
    reg out_data : UInt<16>, clock @[IM.scala 19:27]
    out_data <= UInt<1>("h00") @[IM.scala 21:12]
    when io.inst_info.ctrl.mem_w : @[IM.scala 22:34]
      write mport _T = mem[io.alu_out], clock
      _T <= io.rd_out
      skip @[IM.scala 22:34]
    else : @[IM.scala 24:40]
      when io.inst_info.ctrl.mem_r : @[IM.scala 24:40]
        read mport _T_1 = mem[io.alu_out], clock @[IM.scala 25:25]
        out_data <= _T_1 @[IM.scala 25:14]
        skip @[IM.scala 24:40]
    io.mem_out <= out_data @[IM.scala 28:14]
    wire _T_2 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T_2.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T_2.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T_2.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T_2.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T_2.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_3 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_3.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_3.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_3.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_3.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_3.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_3.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_3.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_3.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T_2.ctrl.rs2_use <= _T_3.rs2_use @[InstInfo.scala 25:12]
    _T_2.ctrl.rs1_use <= _T_3.rs1_use @[InstInfo.scala 25:12]
    _T_2.ctrl.mem_w <= _T_3.mem_w @[InstInfo.scala 25:12]
    _T_2.ctrl.mem_r <= _T_3.mem_r @[InstInfo.scala 25:12]
    _T_2.ctrl.rf_w <= _T_3.rf_w @[InstInfo.scala 25:12]
    _T_2.ctrl.is_branch <= _T_3.is_branch @[InstInfo.scala 25:12]
    _T_2.ctrl.is_jump <= _T_3.is_jump @[InstInfo.scala 25:12]
    _T_2.ctrl.alu_op <= _T_3.alu_op @[InstInfo.scala 25:12]
    reg _T_4 : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, clock with : (reset => (reset, _T_2)) @[IM.scala 29:30]
    _T_4.ctrl.rs2_use <= io.inst_info.ctrl.rs2_use @[IM.scala 29:30]
    _T_4.ctrl.rs1_use <= io.inst_info.ctrl.rs1_use @[IM.scala 29:30]
    _T_4.ctrl.mem_w <= io.inst_info.ctrl.mem_w @[IM.scala 29:30]
    _T_4.ctrl.mem_r <= io.inst_info.ctrl.mem_r @[IM.scala 29:30]
    _T_4.ctrl.rf_w <= io.inst_info.ctrl.rf_w @[IM.scala 29:30]
    _T_4.ctrl.is_branch <= io.inst_info.ctrl.is_branch @[IM.scala 29:30]
    _T_4.ctrl.is_jump <= io.inst_info.ctrl.is_jump @[IM.scala 29:30]
    _T_4.ctrl.alu_op <= io.inst_info.ctrl.alu_op @[IM.scala 29:30]
    _T_4.rob_addr <= io.inst_info.rob_addr @[IM.scala 29:30]
    _T_4.rd_addr <= io.inst_info.rd_addr @[IM.scala 29:30]
    _T_4.total_cnt <= io.inst_info.total_cnt @[IM.scala 29:30]
    _T_4.pc <= io.inst_info.pc @[IM.scala 29:30]
    _T_4.valid <= io.inst_info.valid @[IM.scala 29:30]
    io.inst_info_out.ctrl.rs2_use <= _T_4.ctrl.rs2_use @[IM.scala 29:20]
    io.inst_info_out.ctrl.rs1_use <= _T_4.ctrl.rs1_use @[IM.scala 29:20]
    io.inst_info_out.ctrl.mem_w <= _T_4.ctrl.mem_w @[IM.scala 29:20]
    io.inst_info_out.ctrl.mem_r <= _T_4.ctrl.mem_r @[IM.scala 29:20]
    io.inst_info_out.ctrl.rf_w <= _T_4.ctrl.rf_w @[IM.scala 29:20]
    io.inst_info_out.ctrl.is_branch <= _T_4.ctrl.is_branch @[IM.scala 29:20]
    io.inst_info_out.ctrl.is_jump <= _T_4.ctrl.is_jump @[IM.scala 29:20]
    io.inst_info_out.ctrl.alu_op <= _T_4.ctrl.alu_op @[IM.scala 29:20]
    io.inst_info_out.rob_addr <= _T_4.rob_addr @[IM.scala 29:20]
    io.inst_info_out.rd_addr <= _T_4.rd_addr @[IM.scala 29:20]
    io.inst_info_out.total_cnt <= _T_4.total_cnt @[IM.scala 29:20]
    io.inst_info_out.pc <= _T_4.pc @[IM.scala 29:20]
    io.inst_info_out.valid <= _T_4.valid @[IM.scala 29:20]
    
  module ROB : 
    input clock : Clock
    input reset : Reset
    output io : {flip used_num : UInt<1>, flip graduate : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[2], commit : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>}[1], unreserved_head : {valid : UInt<1>, bits : UInt<4>}[1]}
    
    wire buf_init : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, reserved : UInt<1>, committable : UInt<1>} @[ROB.scala 33:32]
    buf_init.reserved <= UInt<1>("h00") @[ROB.scala 35:21]
    buf_init.committable <= UInt<1>("h00") @[ROB.scala 36:24]
    buf_init.data <= UInt<1>("h00") @[ROB.scala 38:17]
    wire _T : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}} @[InstInfo.scala 19:17]
    _T.pc <= UInt<16>("h0ffff") @[InstInfo.scala 20:10]
    _T.total_cnt <= UInt<16>("h0ffff") @[InstInfo.scala 21:17]
    _T.valid <= UInt<1>("h00") @[InstInfo.scala 22:13]
    _T.rd_addr <= UInt<1>("h00") @[InstInfo.scala 23:15]
    _T.rob_addr <= UInt<1>("h00") @[InstInfo.scala 24:16]
    wire _T_1 : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>} @[InstInfo.scala 29:17]
    _T_1.alu_op <= UInt<1>("h00") @[InstInfo.scala 30:14]
    _T_1.is_jump <= UInt<1>("h00") @[InstInfo.scala 31:15]
    _T_1.is_branch <= UInt<1>("h00") @[InstInfo.scala 32:17]
    _T_1.rf_w <= UInt<1>("h00") @[InstInfo.scala 33:12]
    _T_1.mem_r <= UInt<1>("h00") @[InstInfo.scala 34:13]
    _T_1.mem_w <= UInt<1>("h00") @[InstInfo.scala 35:13]
    _T_1.rs1_use <= UInt<1>("h00") @[InstInfo.scala 36:15]
    _T_1.rs2_use <= UInt<1>("h00") @[InstInfo.scala 37:15]
    _T.ctrl.rs2_use <= _T_1.rs2_use @[InstInfo.scala 25:12]
    _T.ctrl.rs1_use <= _T_1.rs1_use @[InstInfo.scala 25:12]
    _T.ctrl.mem_w <= _T_1.mem_w @[InstInfo.scala 25:12]
    _T.ctrl.mem_r <= _T_1.mem_r @[InstInfo.scala 25:12]
    _T.ctrl.rf_w <= _T_1.rf_w @[InstInfo.scala 25:12]
    _T.ctrl.is_branch <= _T_1.is_branch @[InstInfo.scala 25:12]
    _T.ctrl.is_jump <= _T_1.is_jump @[InstInfo.scala 25:12]
    _T.ctrl.alu_op <= _T_1.alu_op @[InstInfo.scala 25:12]
    buf_init.inst_info.ctrl.rs2_use <= _T.ctrl.rs2_use @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.rs1_use <= _T.ctrl.rs1_use @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.mem_w <= _T.ctrl.mem_w @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.mem_r <= _T.ctrl.mem_r @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.rf_w <= _T.ctrl.rf_w @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.is_branch <= _T.ctrl.is_branch @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.is_jump <= _T.ctrl.is_jump @[ROB.scala 39:22]
    buf_init.inst_info.ctrl.alu_op <= _T.ctrl.alu_op @[ROB.scala 39:22]
    buf_init.inst_info.rob_addr <= _T.rob_addr @[ROB.scala 39:22]
    buf_init.inst_info.rd_addr <= _T.rd_addr @[ROB.scala 39:22]
    buf_init.inst_info.total_cnt <= _T.total_cnt @[ROB.scala 39:22]
    buf_init.inst_info.pc <= _T.pc @[ROB.scala 39:22]
    buf_init.inst_info.valid <= _T.valid @[ROB.scala 39:22]
    wire _T_2 : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, reserved : UInt<1>, committable : UInt<1>}[16] @[ROB.scala 40:43]
    _T_2[0].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[0].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[0].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[0].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[0].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[0].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[0].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[0].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[0].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[1].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[1].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[1].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[1].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[1].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[1].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[1].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[1].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[1].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[2].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[2].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[2].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[2].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[2].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[2].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[2].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[2].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[2].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[3].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[3].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[3].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[3].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[3].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[3].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[3].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[3].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[3].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[4].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[4].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[4].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[4].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[4].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[4].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[4].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[4].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[4].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[5].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[5].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[5].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[5].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[5].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[5].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[5].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[5].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[5].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[6].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[6].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[6].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[6].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[6].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[6].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[6].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[6].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[6].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[7].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[7].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[7].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[7].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[7].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[7].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[7].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[7].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[7].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[8].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[8].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[8].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[8].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[8].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[8].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[8].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[8].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[8].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[9].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[9].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[9].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[9].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[9].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[9].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[9].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[9].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[9].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[10].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[10].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[10].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[10].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[10].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[10].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[10].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[10].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[10].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[11].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[11].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[11].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[11].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[11].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[11].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[11].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[11].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[11].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[12].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[12].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[12].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[12].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[12].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[12].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[12].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[12].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[12].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[13].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[13].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[13].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[13].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[13].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[13].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[13].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[13].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[13].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[14].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[14].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[14].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[14].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[14].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[14].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[14].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[14].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[14].data <= buf_init.data @[ROB.scala 40:43]
    _T_2[15].committable <= buf_init.committable @[ROB.scala 40:43]
    _T_2[15].reserved <= buf_init.reserved @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.rs2_use <= buf_init.inst_info.ctrl.rs2_use @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.rs1_use <= buf_init.inst_info.ctrl.rs1_use @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.mem_w <= buf_init.inst_info.ctrl.mem_w @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.mem_r <= buf_init.inst_info.ctrl.mem_r @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.rf_w <= buf_init.inst_info.ctrl.rf_w @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.is_branch <= buf_init.inst_info.ctrl.is_branch @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.is_jump <= buf_init.inst_info.ctrl.is_jump @[ROB.scala 40:43]
    _T_2[15].inst_info.ctrl.alu_op <= buf_init.inst_info.ctrl.alu_op @[ROB.scala 40:43]
    _T_2[15].inst_info.rob_addr <= buf_init.inst_info.rob_addr @[ROB.scala 40:43]
    _T_2[15].inst_info.rd_addr <= buf_init.inst_info.rd_addr @[ROB.scala 40:43]
    _T_2[15].inst_info.total_cnt <= buf_init.inst_info.total_cnt @[ROB.scala 40:43]
    _T_2[15].inst_info.pc <= buf_init.inst_info.pc @[ROB.scala 40:43]
    _T_2[15].inst_info.valid <= buf_init.inst_info.valid @[ROB.scala 40:43]
    _T_2[15].data <= buf_init.data @[ROB.scala 40:43]
    reg buf : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, reserved : UInt<1>, committable : UInt<1>}[16], clock with : (reset => (reset, _T_2)) @[ROB.scala 40:35]
    reg uncommited : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ROB.scala 42:33]
    node _T_3 = add(uncommited, UInt<1>("h00")) @[ROB.scala 44:48]
    node _T_4 = tail(_T_3, 1) @[ROB.scala 44:48]
    wire _T_5 : UInt<1>[1] @[ROB.scala 43:50]
    _T_5[0] <= buf[_T_4].committable @[ROB.scala 43:50]
    wire commitable : UInt<1>[1]
    commitable[0] <= _T_5[0]
    wire can_commit_cnt_v : UInt<1>[1] @[ROB.scala 45:41]
    can_commit_cnt_v[0] <= commitable[0] @[ROB.scala 46:23]
    node _T_6 = add(uncommited, can_commit_cnt_v[0]) @[ROB.scala 50:41]
    node next_uncommited = tail(_T_6, 1) @[ROB.scala 50:41]
    uncommited <= next_uncommited @[ROB.scala 51:14]
    node _T_7 = and(io.graduate[0].valid, io.graduate[0].bits.mispredicted) @[ROB.scala 53:136]
    node _T_8 = mux(_T_7, io.graduate[0], io.graduate[1]) @[ROB.scala 53:126]
    wire _T_9 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 53:70]
    _T_9[0].bits.mispredicted <= _T_8.bits.mispredicted @[ROB.scala 53:70]
    _T_9[0].bits.addr <= _T_8.bits.addr @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.rs2_use <= _T_8.bits.inst_info.ctrl.rs2_use @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.rs1_use <= _T_8.bits.inst_info.ctrl.rs1_use @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.mem_w <= _T_8.bits.inst_info.ctrl.mem_w @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.mem_r <= _T_8.bits.inst_info.ctrl.mem_r @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.rf_w <= _T_8.bits.inst_info.ctrl.rf_w @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.is_branch <= _T_8.bits.inst_info.ctrl.is_branch @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.is_jump <= _T_8.bits.inst_info.ctrl.is_jump @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.ctrl.alu_op <= _T_8.bits.inst_info.ctrl.alu_op @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.rob_addr <= _T_8.bits.inst_info.rob_addr @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.rd_addr <= _T_8.bits.inst_info.rd_addr @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.total_cnt <= _T_8.bits.inst_info.total_cnt @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.pc <= _T_8.bits.inst_info.pc @[ROB.scala 53:70]
    _T_9[0].bits.inst_info.valid <= _T_8.bits.inst_info.valid @[ROB.scala 53:70]
    _T_9[0].bits.data <= _T_8.bits.data @[ROB.scala 53:70]
    _T_9[0].valid <= _T_8.valid @[ROB.scala 53:70]
    node mispredicted = and(_T_9[0].valid, _T_9[0].bits.mispredicted) @[ROB.scala 54:53]
    reg unreserved : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ROB.scala 57:33]
    node _T_10 = add(unreserved, io.used_num) @[ROB.scala 58:46]
    node unreserved_add_used = tail(_T_10, 1) @[ROB.scala 58:46]
    node unreserved_add_used_valid = eq(buf[unreserved_add_used].reserved, UInt<1>("h00")) @[ROB.scala 59:41]
    node _T_11 = mux(unreserved_add_used_valid, unreserved_add_used, unreserved) @[Mux.scala 87:16]
    node next_unreserved = mux(mispredicted, _T_9[0].bits.addr, _T_11) @[Mux.scala 87:16]
    unreserved <= next_unreserved @[ROB.scala 64:14]
    node _T_12 = eq(io.graduate[0].bits.addr, UInt<1>("h00")) @[ROB.scala 68:36]
    node _T_13 = and(io.graduate[0].valid, _T_12) @[ROB.scala 68:20]
    node _T_14 = mux(_T_13, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_15 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_15[0].bits.mispredicted <= _T_14.bits.mispredicted @[ROB.scala 67:62]
    _T_15[0].bits.addr <= _T_14.bits.addr @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.rs2_use <= _T_14.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.rs1_use <= _T_14.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.mem_w <= _T_14.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.mem_r <= _T_14.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.rf_w <= _T_14.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.is_branch <= _T_14.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.is_jump <= _T_14.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.ctrl.alu_op <= _T_14.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.rob_addr <= _T_14.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.rd_addr <= _T_14.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.total_cnt <= _T_14.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.pc <= _T_14.bits.inst_info.pc @[ROB.scala 67:62]
    _T_15[0].bits.inst_info.valid <= _T_14.bits.inst_info.valid @[ROB.scala 67:62]
    _T_15[0].bits.data <= _T_14.bits.data @[ROB.scala 67:62]
    _T_15[0].valid <= _T_14.valid @[ROB.scala 67:62]
    node _T_16 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_17 = leq(_T_9[0].bits.addr, UInt<1>("h00")) @[ROB.scala 71:61]
    node _T_18 = and(_T_16, _T_17) @[ROB.scala 71:41]
    node _T_19 = lt(UInt<1>("h00"), unreserved) @[ROB.scala 71:75]
    node _T_20 = and(_T_18, _T_19) @[ROB.scala 71:68]
    node _T_21 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_22 = lt(UInt<1>("h00"), unreserved) @[ROB.scala 72:48]
    node _T_23 = leq(_T_9[0].bits.addr, UInt<1>("h00")) @[ROB.scala 72:81]
    node _T_24 = or(_T_22, _T_23) @[ROB.scala 72:61]
    node _T_25 = and(_T_21, _T_24) @[ROB.scala 72:40]
    node _T_26 = or(_T_20, _T_25) @[ROB.scala 71:89]
    node _T_27 = and(mispredicted, _T_26) @[ROB.scala 70:56]
    node _T_28 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_29 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_30 = leq(unreserved, UInt<1>("h00")) @[ROB.scala 75:55]
    node _T_31 = lt(UInt<1>("h00"), next_unreserved) @[ROB.scala 75:69]
    node _T_32 = and(_T_30, _T_31) @[ROB.scala 75:62]
    node _T_33 = and(_T_29, _T_32) @[ROB.scala 75:40]
    node _T_34 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_35 = lt(UInt<1>("h00"), next_unreserved) @[ROB.scala 76:47]
    node _T_36 = leq(unreserved, UInt<1>("h00")) @[ROB.scala 76:79]
    node _T_37 = or(_T_35, _T_36) @[ROB.scala 76:65]
    node _T_38 = and(_T_34, _T_37) @[ROB.scala 76:39]
    node _T_39 = or(_T_33, _T_38) @[ROB.scala 75:89]
    node _T_40 = and(_T_28, _T_39) @[ROB.scala 74:39]
    node _T_41 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_42 = leq(uncommited, UInt<1>("h00")) @[ROB.scala 79:55]
    node _T_43 = lt(UInt<1>("h00"), next_uncommited) @[ROB.scala 79:69]
    node _T_44 = and(_T_42, _T_43) @[ROB.scala 79:62]
    node _T_45 = and(_T_41, _T_44) @[ROB.scala 79:40]
    node _T_46 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_47 = lt(UInt<1>("h00"), next_uncommited) @[ROB.scala 80:48]
    node _T_48 = leq(uncommited, UInt<1>("h00")) @[ROB.scala 80:80]
    node _T_49 = or(_T_47, _T_48) @[ROB.scala 80:66]
    node _T_50 = and(_T_46, _T_49) @[ROB.scala 80:40]
    node _T_51 = or(_T_45, _T_50) @[ROB.scala 79:89]
    node _T_52 = eq(_T_15[0].bits.addr, UInt<1>("h00")) @[ROB.scala 82:60]
    node _T_53 = and(_T_15[0].valid, _T_52) @[ROB.scala 82:38]
    when _T_27 : @[ROB.scala 89:36]
      buf[0].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[0].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_40 : @[ROB.scala 92:32]
        buf[0].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_53 : @[ROB.scala 94:29]
          buf[0].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[0].data <= _T_15[0].bits.data @[ROB.scala 96:19]
          buf[0].inst_info.ctrl.rs2_use <= _T_15[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.rs1_use <= _T_15[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.mem_w <= _T_15[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.mem_r <= _T_15[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.rf_w <= _T_15[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.is_branch <= _T_15[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.is_jump <= _T_15[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[0].inst_info.ctrl.alu_op <= _T_15[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[0].inst_info.rob_addr <= _T_15[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[0].inst_info.rd_addr <= _T_15[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[0].inst_info.total_cnt <= _T_15[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[0].inst_info.pc <= _T_15[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[0].inst_info.valid <= _T_15[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_51 : @[ROB.scala 98:31]
            buf[0].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[0].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_54 = eq(io.graduate[0].bits.addr, UInt<1>("h01")) @[ROB.scala 68:36]
    node _T_55 = and(io.graduate[0].valid, _T_54) @[ROB.scala 68:20]
    node _T_56 = mux(_T_55, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_57 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_57[0].bits.mispredicted <= _T_56.bits.mispredicted @[ROB.scala 67:62]
    _T_57[0].bits.addr <= _T_56.bits.addr @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.rs2_use <= _T_56.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.rs1_use <= _T_56.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.mem_w <= _T_56.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.mem_r <= _T_56.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.rf_w <= _T_56.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.is_branch <= _T_56.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.is_jump <= _T_56.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.ctrl.alu_op <= _T_56.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.rob_addr <= _T_56.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.rd_addr <= _T_56.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.total_cnt <= _T_56.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.pc <= _T_56.bits.inst_info.pc @[ROB.scala 67:62]
    _T_57[0].bits.inst_info.valid <= _T_56.bits.inst_info.valid @[ROB.scala 67:62]
    _T_57[0].bits.data <= _T_56.bits.data @[ROB.scala 67:62]
    _T_57[0].valid <= _T_56.valid @[ROB.scala 67:62]
    node _T_58 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_59 = leq(_T_9[0].bits.addr, UInt<1>("h01")) @[ROB.scala 71:61]
    node _T_60 = and(_T_58, _T_59) @[ROB.scala 71:41]
    node _T_61 = lt(UInt<1>("h01"), unreserved) @[ROB.scala 71:75]
    node _T_62 = and(_T_60, _T_61) @[ROB.scala 71:68]
    node _T_63 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_64 = lt(UInt<1>("h01"), unreserved) @[ROB.scala 72:48]
    node _T_65 = leq(_T_9[0].bits.addr, UInt<1>("h01")) @[ROB.scala 72:81]
    node _T_66 = or(_T_64, _T_65) @[ROB.scala 72:61]
    node _T_67 = and(_T_63, _T_66) @[ROB.scala 72:40]
    node _T_68 = or(_T_62, _T_67) @[ROB.scala 71:89]
    node _T_69 = and(mispredicted, _T_68) @[ROB.scala 70:56]
    node _T_70 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_71 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_72 = leq(unreserved, UInt<1>("h01")) @[ROB.scala 75:55]
    node _T_73 = lt(UInt<1>("h01"), next_unreserved) @[ROB.scala 75:69]
    node _T_74 = and(_T_72, _T_73) @[ROB.scala 75:62]
    node _T_75 = and(_T_71, _T_74) @[ROB.scala 75:40]
    node _T_76 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_77 = lt(UInt<1>("h01"), next_unreserved) @[ROB.scala 76:47]
    node _T_78 = leq(unreserved, UInt<1>("h01")) @[ROB.scala 76:79]
    node _T_79 = or(_T_77, _T_78) @[ROB.scala 76:65]
    node _T_80 = and(_T_76, _T_79) @[ROB.scala 76:39]
    node _T_81 = or(_T_75, _T_80) @[ROB.scala 75:89]
    node _T_82 = and(_T_70, _T_81) @[ROB.scala 74:39]
    node _T_83 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_84 = leq(uncommited, UInt<1>("h01")) @[ROB.scala 79:55]
    node _T_85 = lt(UInt<1>("h01"), next_uncommited) @[ROB.scala 79:69]
    node _T_86 = and(_T_84, _T_85) @[ROB.scala 79:62]
    node _T_87 = and(_T_83, _T_86) @[ROB.scala 79:40]
    node _T_88 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_89 = lt(UInt<1>("h01"), next_uncommited) @[ROB.scala 80:48]
    node _T_90 = leq(uncommited, UInt<1>("h01")) @[ROB.scala 80:80]
    node _T_91 = or(_T_89, _T_90) @[ROB.scala 80:66]
    node _T_92 = and(_T_88, _T_91) @[ROB.scala 80:40]
    node _T_93 = or(_T_87, _T_92) @[ROB.scala 79:89]
    node _T_94 = eq(_T_57[0].bits.addr, UInt<1>("h01")) @[ROB.scala 82:60]
    node _T_95 = and(_T_57[0].valid, _T_94) @[ROB.scala 82:38]
    when _T_69 : @[ROB.scala 89:36]
      buf[1].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[1].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_82 : @[ROB.scala 92:32]
        buf[1].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_95 : @[ROB.scala 94:29]
          buf[1].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[1].data <= _T_57[0].bits.data @[ROB.scala 96:19]
          buf[1].inst_info.ctrl.rs2_use <= _T_57[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.rs1_use <= _T_57[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.mem_w <= _T_57[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.mem_r <= _T_57[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.rf_w <= _T_57[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.is_branch <= _T_57[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.is_jump <= _T_57[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[1].inst_info.ctrl.alu_op <= _T_57[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[1].inst_info.rob_addr <= _T_57[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[1].inst_info.rd_addr <= _T_57[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[1].inst_info.total_cnt <= _T_57[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[1].inst_info.pc <= _T_57[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[1].inst_info.valid <= _T_57[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_93 : @[ROB.scala 98:31]
            buf[1].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[1].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_96 = eq(io.graduate[0].bits.addr, UInt<2>("h02")) @[ROB.scala 68:36]
    node _T_97 = and(io.graduate[0].valid, _T_96) @[ROB.scala 68:20]
    node _T_98 = mux(_T_97, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_99 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_99[0].bits.mispredicted <= _T_98.bits.mispredicted @[ROB.scala 67:62]
    _T_99[0].bits.addr <= _T_98.bits.addr @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.rs2_use <= _T_98.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.rs1_use <= _T_98.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.mem_w <= _T_98.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.mem_r <= _T_98.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.rf_w <= _T_98.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.is_branch <= _T_98.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.is_jump <= _T_98.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.ctrl.alu_op <= _T_98.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.rob_addr <= _T_98.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.rd_addr <= _T_98.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.total_cnt <= _T_98.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.pc <= _T_98.bits.inst_info.pc @[ROB.scala 67:62]
    _T_99[0].bits.inst_info.valid <= _T_98.bits.inst_info.valid @[ROB.scala 67:62]
    _T_99[0].bits.data <= _T_98.bits.data @[ROB.scala 67:62]
    _T_99[0].valid <= _T_98.valid @[ROB.scala 67:62]
    node _T_100 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_101 = leq(_T_9[0].bits.addr, UInt<2>("h02")) @[ROB.scala 71:61]
    node _T_102 = and(_T_100, _T_101) @[ROB.scala 71:41]
    node _T_103 = lt(UInt<2>("h02"), unreserved) @[ROB.scala 71:75]
    node _T_104 = and(_T_102, _T_103) @[ROB.scala 71:68]
    node _T_105 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_106 = lt(UInt<2>("h02"), unreserved) @[ROB.scala 72:48]
    node _T_107 = leq(_T_9[0].bits.addr, UInt<2>("h02")) @[ROB.scala 72:81]
    node _T_108 = or(_T_106, _T_107) @[ROB.scala 72:61]
    node _T_109 = and(_T_105, _T_108) @[ROB.scala 72:40]
    node _T_110 = or(_T_104, _T_109) @[ROB.scala 71:89]
    node _T_111 = and(mispredicted, _T_110) @[ROB.scala 70:56]
    node _T_112 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_113 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_114 = leq(unreserved, UInt<2>("h02")) @[ROB.scala 75:55]
    node _T_115 = lt(UInt<2>("h02"), next_unreserved) @[ROB.scala 75:69]
    node _T_116 = and(_T_114, _T_115) @[ROB.scala 75:62]
    node _T_117 = and(_T_113, _T_116) @[ROB.scala 75:40]
    node _T_118 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_119 = lt(UInt<2>("h02"), next_unreserved) @[ROB.scala 76:47]
    node _T_120 = leq(unreserved, UInt<2>("h02")) @[ROB.scala 76:79]
    node _T_121 = or(_T_119, _T_120) @[ROB.scala 76:65]
    node _T_122 = and(_T_118, _T_121) @[ROB.scala 76:39]
    node _T_123 = or(_T_117, _T_122) @[ROB.scala 75:89]
    node _T_124 = and(_T_112, _T_123) @[ROB.scala 74:39]
    node _T_125 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_126 = leq(uncommited, UInt<2>("h02")) @[ROB.scala 79:55]
    node _T_127 = lt(UInt<2>("h02"), next_uncommited) @[ROB.scala 79:69]
    node _T_128 = and(_T_126, _T_127) @[ROB.scala 79:62]
    node _T_129 = and(_T_125, _T_128) @[ROB.scala 79:40]
    node _T_130 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_131 = lt(UInt<2>("h02"), next_uncommited) @[ROB.scala 80:48]
    node _T_132 = leq(uncommited, UInt<2>("h02")) @[ROB.scala 80:80]
    node _T_133 = or(_T_131, _T_132) @[ROB.scala 80:66]
    node _T_134 = and(_T_130, _T_133) @[ROB.scala 80:40]
    node _T_135 = or(_T_129, _T_134) @[ROB.scala 79:89]
    node _T_136 = eq(_T_99[0].bits.addr, UInt<2>("h02")) @[ROB.scala 82:60]
    node _T_137 = and(_T_99[0].valid, _T_136) @[ROB.scala 82:38]
    when _T_111 : @[ROB.scala 89:36]
      buf[2].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[2].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_124 : @[ROB.scala 92:32]
        buf[2].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_137 : @[ROB.scala 94:29]
          buf[2].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[2].data <= _T_99[0].bits.data @[ROB.scala 96:19]
          buf[2].inst_info.ctrl.rs2_use <= _T_99[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.rs1_use <= _T_99[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.mem_w <= _T_99[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.mem_r <= _T_99[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.rf_w <= _T_99[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.is_branch <= _T_99[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.is_jump <= _T_99[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[2].inst_info.ctrl.alu_op <= _T_99[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[2].inst_info.rob_addr <= _T_99[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[2].inst_info.rd_addr <= _T_99[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[2].inst_info.total_cnt <= _T_99[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[2].inst_info.pc <= _T_99[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[2].inst_info.valid <= _T_99[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_135 : @[ROB.scala 98:31]
            buf[2].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[2].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_138 = eq(io.graduate[0].bits.addr, UInt<2>("h03")) @[ROB.scala 68:36]
    node _T_139 = and(io.graduate[0].valid, _T_138) @[ROB.scala 68:20]
    node _T_140 = mux(_T_139, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_141 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_141[0].bits.mispredicted <= _T_140.bits.mispredicted @[ROB.scala 67:62]
    _T_141[0].bits.addr <= _T_140.bits.addr @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.rs2_use <= _T_140.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.rs1_use <= _T_140.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.mem_w <= _T_140.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.mem_r <= _T_140.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.rf_w <= _T_140.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.is_branch <= _T_140.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.is_jump <= _T_140.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.ctrl.alu_op <= _T_140.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.rob_addr <= _T_140.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.rd_addr <= _T_140.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.total_cnt <= _T_140.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.pc <= _T_140.bits.inst_info.pc @[ROB.scala 67:62]
    _T_141[0].bits.inst_info.valid <= _T_140.bits.inst_info.valid @[ROB.scala 67:62]
    _T_141[0].bits.data <= _T_140.bits.data @[ROB.scala 67:62]
    _T_141[0].valid <= _T_140.valid @[ROB.scala 67:62]
    node _T_142 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_143 = leq(_T_9[0].bits.addr, UInt<2>("h03")) @[ROB.scala 71:61]
    node _T_144 = and(_T_142, _T_143) @[ROB.scala 71:41]
    node _T_145 = lt(UInt<2>("h03"), unreserved) @[ROB.scala 71:75]
    node _T_146 = and(_T_144, _T_145) @[ROB.scala 71:68]
    node _T_147 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_148 = lt(UInt<2>("h03"), unreserved) @[ROB.scala 72:48]
    node _T_149 = leq(_T_9[0].bits.addr, UInt<2>("h03")) @[ROB.scala 72:81]
    node _T_150 = or(_T_148, _T_149) @[ROB.scala 72:61]
    node _T_151 = and(_T_147, _T_150) @[ROB.scala 72:40]
    node _T_152 = or(_T_146, _T_151) @[ROB.scala 71:89]
    node _T_153 = and(mispredicted, _T_152) @[ROB.scala 70:56]
    node _T_154 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_155 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_156 = leq(unreserved, UInt<2>("h03")) @[ROB.scala 75:55]
    node _T_157 = lt(UInt<2>("h03"), next_unreserved) @[ROB.scala 75:69]
    node _T_158 = and(_T_156, _T_157) @[ROB.scala 75:62]
    node _T_159 = and(_T_155, _T_158) @[ROB.scala 75:40]
    node _T_160 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_161 = lt(UInt<2>("h03"), next_unreserved) @[ROB.scala 76:47]
    node _T_162 = leq(unreserved, UInt<2>("h03")) @[ROB.scala 76:79]
    node _T_163 = or(_T_161, _T_162) @[ROB.scala 76:65]
    node _T_164 = and(_T_160, _T_163) @[ROB.scala 76:39]
    node _T_165 = or(_T_159, _T_164) @[ROB.scala 75:89]
    node _T_166 = and(_T_154, _T_165) @[ROB.scala 74:39]
    node _T_167 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_168 = leq(uncommited, UInt<2>("h03")) @[ROB.scala 79:55]
    node _T_169 = lt(UInt<2>("h03"), next_uncommited) @[ROB.scala 79:69]
    node _T_170 = and(_T_168, _T_169) @[ROB.scala 79:62]
    node _T_171 = and(_T_167, _T_170) @[ROB.scala 79:40]
    node _T_172 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_173 = lt(UInt<2>("h03"), next_uncommited) @[ROB.scala 80:48]
    node _T_174 = leq(uncommited, UInt<2>("h03")) @[ROB.scala 80:80]
    node _T_175 = or(_T_173, _T_174) @[ROB.scala 80:66]
    node _T_176 = and(_T_172, _T_175) @[ROB.scala 80:40]
    node _T_177 = or(_T_171, _T_176) @[ROB.scala 79:89]
    node _T_178 = eq(_T_141[0].bits.addr, UInt<2>("h03")) @[ROB.scala 82:60]
    node _T_179 = and(_T_141[0].valid, _T_178) @[ROB.scala 82:38]
    when _T_153 : @[ROB.scala 89:36]
      buf[3].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[3].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_166 : @[ROB.scala 92:32]
        buf[3].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_179 : @[ROB.scala 94:29]
          buf[3].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[3].data <= _T_141[0].bits.data @[ROB.scala 96:19]
          buf[3].inst_info.ctrl.rs2_use <= _T_141[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.rs1_use <= _T_141[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.mem_w <= _T_141[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.mem_r <= _T_141[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.rf_w <= _T_141[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.is_branch <= _T_141[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.is_jump <= _T_141[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[3].inst_info.ctrl.alu_op <= _T_141[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[3].inst_info.rob_addr <= _T_141[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[3].inst_info.rd_addr <= _T_141[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[3].inst_info.total_cnt <= _T_141[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[3].inst_info.pc <= _T_141[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[3].inst_info.valid <= _T_141[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_177 : @[ROB.scala 98:31]
            buf[3].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[3].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_180 = eq(io.graduate[0].bits.addr, UInt<3>("h04")) @[ROB.scala 68:36]
    node _T_181 = and(io.graduate[0].valid, _T_180) @[ROB.scala 68:20]
    node _T_182 = mux(_T_181, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_183 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_183[0].bits.mispredicted <= _T_182.bits.mispredicted @[ROB.scala 67:62]
    _T_183[0].bits.addr <= _T_182.bits.addr @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.rs2_use <= _T_182.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.rs1_use <= _T_182.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.mem_w <= _T_182.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.mem_r <= _T_182.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.rf_w <= _T_182.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.is_branch <= _T_182.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.is_jump <= _T_182.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.ctrl.alu_op <= _T_182.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.rob_addr <= _T_182.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.rd_addr <= _T_182.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.total_cnt <= _T_182.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.pc <= _T_182.bits.inst_info.pc @[ROB.scala 67:62]
    _T_183[0].bits.inst_info.valid <= _T_182.bits.inst_info.valid @[ROB.scala 67:62]
    _T_183[0].bits.data <= _T_182.bits.data @[ROB.scala 67:62]
    _T_183[0].valid <= _T_182.valid @[ROB.scala 67:62]
    node _T_184 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_185 = leq(_T_9[0].bits.addr, UInt<3>("h04")) @[ROB.scala 71:61]
    node _T_186 = and(_T_184, _T_185) @[ROB.scala 71:41]
    node _T_187 = lt(UInt<3>("h04"), unreserved) @[ROB.scala 71:75]
    node _T_188 = and(_T_186, _T_187) @[ROB.scala 71:68]
    node _T_189 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_190 = lt(UInt<3>("h04"), unreserved) @[ROB.scala 72:48]
    node _T_191 = leq(_T_9[0].bits.addr, UInt<3>("h04")) @[ROB.scala 72:81]
    node _T_192 = or(_T_190, _T_191) @[ROB.scala 72:61]
    node _T_193 = and(_T_189, _T_192) @[ROB.scala 72:40]
    node _T_194 = or(_T_188, _T_193) @[ROB.scala 71:89]
    node _T_195 = and(mispredicted, _T_194) @[ROB.scala 70:56]
    node _T_196 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_197 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_198 = leq(unreserved, UInt<3>("h04")) @[ROB.scala 75:55]
    node _T_199 = lt(UInt<3>("h04"), next_unreserved) @[ROB.scala 75:69]
    node _T_200 = and(_T_198, _T_199) @[ROB.scala 75:62]
    node _T_201 = and(_T_197, _T_200) @[ROB.scala 75:40]
    node _T_202 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_203 = lt(UInt<3>("h04"), next_unreserved) @[ROB.scala 76:47]
    node _T_204 = leq(unreserved, UInt<3>("h04")) @[ROB.scala 76:79]
    node _T_205 = or(_T_203, _T_204) @[ROB.scala 76:65]
    node _T_206 = and(_T_202, _T_205) @[ROB.scala 76:39]
    node _T_207 = or(_T_201, _T_206) @[ROB.scala 75:89]
    node _T_208 = and(_T_196, _T_207) @[ROB.scala 74:39]
    node _T_209 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_210 = leq(uncommited, UInt<3>("h04")) @[ROB.scala 79:55]
    node _T_211 = lt(UInt<3>("h04"), next_uncommited) @[ROB.scala 79:69]
    node _T_212 = and(_T_210, _T_211) @[ROB.scala 79:62]
    node _T_213 = and(_T_209, _T_212) @[ROB.scala 79:40]
    node _T_214 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_215 = lt(UInt<3>("h04"), next_uncommited) @[ROB.scala 80:48]
    node _T_216 = leq(uncommited, UInt<3>("h04")) @[ROB.scala 80:80]
    node _T_217 = or(_T_215, _T_216) @[ROB.scala 80:66]
    node _T_218 = and(_T_214, _T_217) @[ROB.scala 80:40]
    node _T_219 = or(_T_213, _T_218) @[ROB.scala 79:89]
    node _T_220 = eq(_T_183[0].bits.addr, UInt<3>("h04")) @[ROB.scala 82:60]
    node _T_221 = and(_T_183[0].valid, _T_220) @[ROB.scala 82:38]
    when _T_195 : @[ROB.scala 89:36]
      buf[4].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[4].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_208 : @[ROB.scala 92:32]
        buf[4].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_221 : @[ROB.scala 94:29]
          buf[4].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[4].data <= _T_183[0].bits.data @[ROB.scala 96:19]
          buf[4].inst_info.ctrl.rs2_use <= _T_183[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.rs1_use <= _T_183[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.mem_w <= _T_183[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.mem_r <= _T_183[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.rf_w <= _T_183[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.is_branch <= _T_183[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.is_jump <= _T_183[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[4].inst_info.ctrl.alu_op <= _T_183[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[4].inst_info.rob_addr <= _T_183[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[4].inst_info.rd_addr <= _T_183[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[4].inst_info.total_cnt <= _T_183[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[4].inst_info.pc <= _T_183[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[4].inst_info.valid <= _T_183[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_219 : @[ROB.scala 98:31]
            buf[4].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[4].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_222 = eq(io.graduate[0].bits.addr, UInt<3>("h05")) @[ROB.scala 68:36]
    node _T_223 = and(io.graduate[0].valid, _T_222) @[ROB.scala 68:20]
    node _T_224 = mux(_T_223, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_225 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_225[0].bits.mispredicted <= _T_224.bits.mispredicted @[ROB.scala 67:62]
    _T_225[0].bits.addr <= _T_224.bits.addr @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.rs2_use <= _T_224.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.rs1_use <= _T_224.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.mem_w <= _T_224.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.mem_r <= _T_224.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.rf_w <= _T_224.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.is_branch <= _T_224.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.is_jump <= _T_224.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.ctrl.alu_op <= _T_224.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.rob_addr <= _T_224.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.rd_addr <= _T_224.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.total_cnt <= _T_224.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.pc <= _T_224.bits.inst_info.pc @[ROB.scala 67:62]
    _T_225[0].bits.inst_info.valid <= _T_224.bits.inst_info.valid @[ROB.scala 67:62]
    _T_225[0].bits.data <= _T_224.bits.data @[ROB.scala 67:62]
    _T_225[0].valid <= _T_224.valid @[ROB.scala 67:62]
    node _T_226 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_227 = leq(_T_9[0].bits.addr, UInt<3>("h05")) @[ROB.scala 71:61]
    node _T_228 = and(_T_226, _T_227) @[ROB.scala 71:41]
    node _T_229 = lt(UInt<3>("h05"), unreserved) @[ROB.scala 71:75]
    node _T_230 = and(_T_228, _T_229) @[ROB.scala 71:68]
    node _T_231 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_232 = lt(UInt<3>("h05"), unreserved) @[ROB.scala 72:48]
    node _T_233 = leq(_T_9[0].bits.addr, UInt<3>("h05")) @[ROB.scala 72:81]
    node _T_234 = or(_T_232, _T_233) @[ROB.scala 72:61]
    node _T_235 = and(_T_231, _T_234) @[ROB.scala 72:40]
    node _T_236 = or(_T_230, _T_235) @[ROB.scala 71:89]
    node _T_237 = and(mispredicted, _T_236) @[ROB.scala 70:56]
    node _T_238 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_239 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_240 = leq(unreserved, UInt<3>("h05")) @[ROB.scala 75:55]
    node _T_241 = lt(UInt<3>("h05"), next_unreserved) @[ROB.scala 75:69]
    node _T_242 = and(_T_240, _T_241) @[ROB.scala 75:62]
    node _T_243 = and(_T_239, _T_242) @[ROB.scala 75:40]
    node _T_244 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_245 = lt(UInt<3>("h05"), next_unreserved) @[ROB.scala 76:47]
    node _T_246 = leq(unreserved, UInt<3>("h05")) @[ROB.scala 76:79]
    node _T_247 = or(_T_245, _T_246) @[ROB.scala 76:65]
    node _T_248 = and(_T_244, _T_247) @[ROB.scala 76:39]
    node _T_249 = or(_T_243, _T_248) @[ROB.scala 75:89]
    node _T_250 = and(_T_238, _T_249) @[ROB.scala 74:39]
    node _T_251 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_252 = leq(uncommited, UInt<3>("h05")) @[ROB.scala 79:55]
    node _T_253 = lt(UInt<3>("h05"), next_uncommited) @[ROB.scala 79:69]
    node _T_254 = and(_T_252, _T_253) @[ROB.scala 79:62]
    node _T_255 = and(_T_251, _T_254) @[ROB.scala 79:40]
    node _T_256 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_257 = lt(UInt<3>("h05"), next_uncommited) @[ROB.scala 80:48]
    node _T_258 = leq(uncommited, UInt<3>("h05")) @[ROB.scala 80:80]
    node _T_259 = or(_T_257, _T_258) @[ROB.scala 80:66]
    node _T_260 = and(_T_256, _T_259) @[ROB.scala 80:40]
    node _T_261 = or(_T_255, _T_260) @[ROB.scala 79:89]
    node _T_262 = eq(_T_225[0].bits.addr, UInt<3>("h05")) @[ROB.scala 82:60]
    node _T_263 = and(_T_225[0].valid, _T_262) @[ROB.scala 82:38]
    when _T_237 : @[ROB.scala 89:36]
      buf[5].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[5].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_250 : @[ROB.scala 92:32]
        buf[5].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_263 : @[ROB.scala 94:29]
          buf[5].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[5].data <= _T_225[0].bits.data @[ROB.scala 96:19]
          buf[5].inst_info.ctrl.rs2_use <= _T_225[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.rs1_use <= _T_225[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.mem_w <= _T_225[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.mem_r <= _T_225[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.rf_w <= _T_225[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.is_branch <= _T_225[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.is_jump <= _T_225[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[5].inst_info.ctrl.alu_op <= _T_225[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[5].inst_info.rob_addr <= _T_225[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[5].inst_info.rd_addr <= _T_225[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[5].inst_info.total_cnt <= _T_225[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[5].inst_info.pc <= _T_225[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[5].inst_info.valid <= _T_225[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_261 : @[ROB.scala 98:31]
            buf[5].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[5].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_264 = eq(io.graduate[0].bits.addr, UInt<3>("h06")) @[ROB.scala 68:36]
    node _T_265 = and(io.graduate[0].valid, _T_264) @[ROB.scala 68:20]
    node _T_266 = mux(_T_265, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_267 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_267[0].bits.mispredicted <= _T_266.bits.mispredicted @[ROB.scala 67:62]
    _T_267[0].bits.addr <= _T_266.bits.addr @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.rs2_use <= _T_266.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.rs1_use <= _T_266.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.mem_w <= _T_266.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.mem_r <= _T_266.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.rf_w <= _T_266.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.is_branch <= _T_266.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.is_jump <= _T_266.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.ctrl.alu_op <= _T_266.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.rob_addr <= _T_266.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.rd_addr <= _T_266.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.total_cnt <= _T_266.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.pc <= _T_266.bits.inst_info.pc @[ROB.scala 67:62]
    _T_267[0].bits.inst_info.valid <= _T_266.bits.inst_info.valid @[ROB.scala 67:62]
    _T_267[0].bits.data <= _T_266.bits.data @[ROB.scala 67:62]
    _T_267[0].valid <= _T_266.valid @[ROB.scala 67:62]
    node _T_268 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_269 = leq(_T_9[0].bits.addr, UInt<3>("h06")) @[ROB.scala 71:61]
    node _T_270 = and(_T_268, _T_269) @[ROB.scala 71:41]
    node _T_271 = lt(UInt<3>("h06"), unreserved) @[ROB.scala 71:75]
    node _T_272 = and(_T_270, _T_271) @[ROB.scala 71:68]
    node _T_273 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_274 = lt(UInt<3>("h06"), unreserved) @[ROB.scala 72:48]
    node _T_275 = leq(_T_9[0].bits.addr, UInt<3>("h06")) @[ROB.scala 72:81]
    node _T_276 = or(_T_274, _T_275) @[ROB.scala 72:61]
    node _T_277 = and(_T_273, _T_276) @[ROB.scala 72:40]
    node _T_278 = or(_T_272, _T_277) @[ROB.scala 71:89]
    node _T_279 = and(mispredicted, _T_278) @[ROB.scala 70:56]
    node _T_280 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_281 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_282 = leq(unreserved, UInt<3>("h06")) @[ROB.scala 75:55]
    node _T_283 = lt(UInt<3>("h06"), next_unreserved) @[ROB.scala 75:69]
    node _T_284 = and(_T_282, _T_283) @[ROB.scala 75:62]
    node _T_285 = and(_T_281, _T_284) @[ROB.scala 75:40]
    node _T_286 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_287 = lt(UInt<3>("h06"), next_unreserved) @[ROB.scala 76:47]
    node _T_288 = leq(unreserved, UInt<3>("h06")) @[ROB.scala 76:79]
    node _T_289 = or(_T_287, _T_288) @[ROB.scala 76:65]
    node _T_290 = and(_T_286, _T_289) @[ROB.scala 76:39]
    node _T_291 = or(_T_285, _T_290) @[ROB.scala 75:89]
    node _T_292 = and(_T_280, _T_291) @[ROB.scala 74:39]
    node _T_293 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_294 = leq(uncommited, UInt<3>("h06")) @[ROB.scala 79:55]
    node _T_295 = lt(UInt<3>("h06"), next_uncommited) @[ROB.scala 79:69]
    node _T_296 = and(_T_294, _T_295) @[ROB.scala 79:62]
    node _T_297 = and(_T_293, _T_296) @[ROB.scala 79:40]
    node _T_298 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_299 = lt(UInt<3>("h06"), next_uncommited) @[ROB.scala 80:48]
    node _T_300 = leq(uncommited, UInt<3>("h06")) @[ROB.scala 80:80]
    node _T_301 = or(_T_299, _T_300) @[ROB.scala 80:66]
    node _T_302 = and(_T_298, _T_301) @[ROB.scala 80:40]
    node _T_303 = or(_T_297, _T_302) @[ROB.scala 79:89]
    node _T_304 = eq(_T_267[0].bits.addr, UInt<3>("h06")) @[ROB.scala 82:60]
    node _T_305 = and(_T_267[0].valid, _T_304) @[ROB.scala 82:38]
    when _T_279 : @[ROB.scala 89:36]
      buf[6].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[6].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_292 : @[ROB.scala 92:32]
        buf[6].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_305 : @[ROB.scala 94:29]
          buf[6].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[6].data <= _T_267[0].bits.data @[ROB.scala 96:19]
          buf[6].inst_info.ctrl.rs2_use <= _T_267[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.rs1_use <= _T_267[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.mem_w <= _T_267[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.mem_r <= _T_267[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.rf_w <= _T_267[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.is_branch <= _T_267[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.is_jump <= _T_267[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[6].inst_info.ctrl.alu_op <= _T_267[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[6].inst_info.rob_addr <= _T_267[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[6].inst_info.rd_addr <= _T_267[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[6].inst_info.total_cnt <= _T_267[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[6].inst_info.pc <= _T_267[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[6].inst_info.valid <= _T_267[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_303 : @[ROB.scala 98:31]
            buf[6].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[6].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_306 = eq(io.graduate[0].bits.addr, UInt<3>("h07")) @[ROB.scala 68:36]
    node _T_307 = and(io.graduate[0].valid, _T_306) @[ROB.scala 68:20]
    node _T_308 = mux(_T_307, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_309 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_309[0].bits.mispredicted <= _T_308.bits.mispredicted @[ROB.scala 67:62]
    _T_309[0].bits.addr <= _T_308.bits.addr @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.rs2_use <= _T_308.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.rs1_use <= _T_308.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.mem_w <= _T_308.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.mem_r <= _T_308.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.rf_w <= _T_308.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.is_branch <= _T_308.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.is_jump <= _T_308.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.ctrl.alu_op <= _T_308.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.rob_addr <= _T_308.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.rd_addr <= _T_308.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.total_cnt <= _T_308.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.pc <= _T_308.bits.inst_info.pc @[ROB.scala 67:62]
    _T_309[0].bits.inst_info.valid <= _T_308.bits.inst_info.valid @[ROB.scala 67:62]
    _T_309[0].bits.data <= _T_308.bits.data @[ROB.scala 67:62]
    _T_309[0].valid <= _T_308.valid @[ROB.scala 67:62]
    node _T_310 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_311 = leq(_T_9[0].bits.addr, UInt<3>("h07")) @[ROB.scala 71:61]
    node _T_312 = and(_T_310, _T_311) @[ROB.scala 71:41]
    node _T_313 = lt(UInt<3>("h07"), unreserved) @[ROB.scala 71:75]
    node _T_314 = and(_T_312, _T_313) @[ROB.scala 71:68]
    node _T_315 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_316 = lt(UInt<3>("h07"), unreserved) @[ROB.scala 72:48]
    node _T_317 = leq(_T_9[0].bits.addr, UInt<3>("h07")) @[ROB.scala 72:81]
    node _T_318 = or(_T_316, _T_317) @[ROB.scala 72:61]
    node _T_319 = and(_T_315, _T_318) @[ROB.scala 72:40]
    node _T_320 = or(_T_314, _T_319) @[ROB.scala 71:89]
    node _T_321 = and(mispredicted, _T_320) @[ROB.scala 70:56]
    node _T_322 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_323 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_324 = leq(unreserved, UInt<3>("h07")) @[ROB.scala 75:55]
    node _T_325 = lt(UInt<3>("h07"), next_unreserved) @[ROB.scala 75:69]
    node _T_326 = and(_T_324, _T_325) @[ROB.scala 75:62]
    node _T_327 = and(_T_323, _T_326) @[ROB.scala 75:40]
    node _T_328 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_329 = lt(UInt<3>("h07"), next_unreserved) @[ROB.scala 76:47]
    node _T_330 = leq(unreserved, UInt<3>("h07")) @[ROB.scala 76:79]
    node _T_331 = or(_T_329, _T_330) @[ROB.scala 76:65]
    node _T_332 = and(_T_328, _T_331) @[ROB.scala 76:39]
    node _T_333 = or(_T_327, _T_332) @[ROB.scala 75:89]
    node _T_334 = and(_T_322, _T_333) @[ROB.scala 74:39]
    node _T_335 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_336 = leq(uncommited, UInt<3>("h07")) @[ROB.scala 79:55]
    node _T_337 = lt(UInt<3>("h07"), next_uncommited) @[ROB.scala 79:69]
    node _T_338 = and(_T_336, _T_337) @[ROB.scala 79:62]
    node _T_339 = and(_T_335, _T_338) @[ROB.scala 79:40]
    node _T_340 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_341 = lt(UInt<3>("h07"), next_uncommited) @[ROB.scala 80:48]
    node _T_342 = leq(uncommited, UInt<3>("h07")) @[ROB.scala 80:80]
    node _T_343 = or(_T_341, _T_342) @[ROB.scala 80:66]
    node _T_344 = and(_T_340, _T_343) @[ROB.scala 80:40]
    node _T_345 = or(_T_339, _T_344) @[ROB.scala 79:89]
    node _T_346 = eq(_T_309[0].bits.addr, UInt<3>("h07")) @[ROB.scala 82:60]
    node _T_347 = and(_T_309[0].valid, _T_346) @[ROB.scala 82:38]
    when _T_321 : @[ROB.scala 89:36]
      buf[7].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[7].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_334 : @[ROB.scala 92:32]
        buf[7].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_347 : @[ROB.scala 94:29]
          buf[7].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[7].data <= _T_309[0].bits.data @[ROB.scala 96:19]
          buf[7].inst_info.ctrl.rs2_use <= _T_309[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.rs1_use <= _T_309[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.mem_w <= _T_309[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.mem_r <= _T_309[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.rf_w <= _T_309[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.is_branch <= _T_309[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.is_jump <= _T_309[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[7].inst_info.ctrl.alu_op <= _T_309[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[7].inst_info.rob_addr <= _T_309[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[7].inst_info.rd_addr <= _T_309[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[7].inst_info.total_cnt <= _T_309[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[7].inst_info.pc <= _T_309[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[7].inst_info.valid <= _T_309[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_345 : @[ROB.scala 98:31]
            buf[7].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[7].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_348 = eq(io.graduate[0].bits.addr, UInt<4>("h08")) @[ROB.scala 68:36]
    node _T_349 = and(io.graduate[0].valid, _T_348) @[ROB.scala 68:20]
    node _T_350 = mux(_T_349, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_351 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_351[0].bits.mispredicted <= _T_350.bits.mispredicted @[ROB.scala 67:62]
    _T_351[0].bits.addr <= _T_350.bits.addr @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.rs2_use <= _T_350.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.rs1_use <= _T_350.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.mem_w <= _T_350.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.mem_r <= _T_350.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.rf_w <= _T_350.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.is_branch <= _T_350.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.is_jump <= _T_350.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.ctrl.alu_op <= _T_350.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.rob_addr <= _T_350.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.rd_addr <= _T_350.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.total_cnt <= _T_350.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.pc <= _T_350.bits.inst_info.pc @[ROB.scala 67:62]
    _T_351[0].bits.inst_info.valid <= _T_350.bits.inst_info.valid @[ROB.scala 67:62]
    _T_351[0].bits.data <= _T_350.bits.data @[ROB.scala 67:62]
    _T_351[0].valid <= _T_350.valid @[ROB.scala 67:62]
    node _T_352 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_353 = leq(_T_9[0].bits.addr, UInt<4>("h08")) @[ROB.scala 71:61]
    node _T_354 = and(_T_352, _T_353) @[ROB.scala 71:41]
    node _T_355 = lt(UInt<4>("h08"), unreserved) @[ROB.scala 71:75]
    node _T_356 = and(_T_354, _T_355) @[ROB.scala 71:68]
    node _T_357 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_358 = lt(UInt<4>("h08"), unreserved) @[ROB.scala 72:48]
    node _T_359 = leq(_T_9[0].bits.addr, UInt<4>("h08")) @[ROB.scala 72:81]
    node _T_360 = or(_T_358, _T_359) @[ROB.scala 72:61]
    node _T_361 = and(_T_357, _T_360) @[ROB.scala 72:40]
    node _T_362 = or(_T_356, _T_361) @[ROB.scala 71:89]
    node _T_363 = and(mispredicted, _T_362) @[ROB.scala 70:56]
    node _T_364 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_365 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_366 = leq(unreserved, UInt<4>("h08")) @[ROB.scala 75:55]
    node _T_367 = lt(UInt<4>("h08"), next_unreserved) @[ROB.scala 75:69]
    node _T_368 = and(_T_366, _T_367) @[ROB.scala 75:62]
    node _T_369 = and(_T_365, _T_368) @[ROB.scala 75:40]
    node _T_370 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_371 = lt(UInt<4>("h08"), next_unreserved) @[ROB.scala 76:47]
    node _T_372 = leq(unreserved, UInt<4>("h08")) @[ROB.scala 76:79]
    node _T_373 = or(_T_371, _T_372) @[ROB.scala 76:65]
    node _T_374 = and(_T_370, _T_373) @[ROB.scala 76:39]
    node _T_375 = or(_T_369, _T_374) @[ROB.scala 75:89]
    node _T_376 = and(_T_364, _T_375) @[ROB.scala 74:39]
    node _T_377 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_378 = leq(uncommited, UInt<4>("h08")) @[ROB.scala 79:55]
    node _T_379 = lt(UInt<4>("h08"), next_uncommited) @[ROB.scala 79:69]
    node _T_380 = and(_T_378, _T_379) @[ROB.scala 79:62]
    node _T_381 = and(_T_377, _T_380) @[ROB.scala 79:40]
    node _T_382 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_383 = lt(UInt<4>("h08"), next_uncommited) @[ROB.scala 80:48]
    node _T_384 = leq(uncommited, UInt<4>("h08")) @[ROB.scala 80:80]
    node _T_385 = or(_T_383, _T_384) @[ROB.scala 80:66]
    node _T_386 = and(_T_382, _T_385) @[ROB.scala 80:40]
    node _T_387 = or(_T_381, _T_386) @[ROB.scala 79:89]
    node _T_388 = eq(_T_351[0].bits.addr, UInt<4>("h08")) @[ROB.scala 82:60]
    node _T_389 = and(_T_351[0].valid, _T_388) @[ROB.scala 82:38]
    when _T_363 : @[ROB.scala 89:36]
      buf[8].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[8].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_376 : @[ROB.scala 92:32]
        buf[8].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_389 : @[ROB.scala 94:29]
          buf[8].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[8].data <= _T_351[0].bits.data @[ROB.scala 96:19]
          buf[8].inst_info.ctrl.rs2_use <= _T_351[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.rs1_use <= _T_351[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.mem_w <= _T_351[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.mem_r <= _T_351[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.rf_w <= _T_351[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.is_branch <= _T_351[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.is_jump <= _T_351[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[8].inst_info.ctrl.alu_op <= _T_351[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[8].inst_info.rob_addr <= _T_351[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[8].inst_info.rd_addr <= _T_351[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[8].inst_info.total_cnt <= _T_351[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[8].inst_info.pc <= _T_351[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[8].inst_info.valid <= _T_351[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_387 : @[ROB.scala 98:31]
            buf[8].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[8].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_390 = eq(io.graduate[0].bits.addr, UInt<4>("h09")) @[ROB.scala 68:36]
    node _T_391 = and(io.graduate[0].valid, _T_390) @[ROB.scala 68:20]
    node _T_392 = mux(_T_391, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_393 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_393[0].bits.mispredicted <= _T_392.bits.mispredicted @[ROB.scala 67:62]
    _T_393[0].bits.addr <= _T_392.bits.addr @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.rs2_use <= _T_392.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.rs1_use <= _T_392.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.mem_w <= _T_392.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.mem_r <= _T_392.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.rf_w <= _T_392.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.is_branch <= _T_392.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.is_jump <= _T_392.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.ctrl.alu_op <= _T_392.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.rob_addr <= _T_392.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.rd_addr <= _T_392.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.total_cnt <= _T_392.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.pc <= _T_392.bits.inst_info.pc @[ROB.scala 67:62]
    _T_393[0].bits.inst_info.valid <= _T_392.bits.inst_info.valid @[ROB.scala 67:62]
    _T_393[0].bits.data <= _T_392.bits.data @[ROB.scala 67:62]
    _T_393[0].valid <= _T_392.valid @[ROB.scala 67:62]
    node _T_394 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_395 = leq(_T_9[0].bits.addr, UInt<4>("h09")) @[ROB.scala 71:61]
    node _T_396 = and(_T_394, _T_395) @[ROB.scala 71:41]
    node _T_397 = lt(UInt<4>("h09"), unreserved) @[ROB.scala 71:75]
    node _T_398 = and(_T_396, _T_397) @[ROB.scala 71:68]
    node _T_399 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_400 = lt(UInt<4>("h09"), unreserved) @[ROB.scala 72:48]
    node _T_401 = leq(_T_9[0].bits.addr, UInt<4>("h09")) @[ROB.scala 72:81]
    node _T_402 = or(_T_400, _T_401) @[ROB.scala 72:61]
    node _T_403 = and(_T_399, _T_402) @[ROB.scala 72:40]
    node _T_404 = or(_T_398, _T_403) @[ROB.scala 71:89]
    node _T_405 = and(mispredicted, _T_404) @[ROB.scala 70:56]
    node _T_406 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_407 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_408 = leq(unreserved, UInt<4>("h09")) @[ROB.scala 75:55]
    node _T_409 = lt(UInt<4>("h09"), next_unreserved) @[ROB.scala 75:69]
    node _T_410 = and(_T_408, _T_409) @[ROB.scala 75:62]
    node _T_411 = and(_T_407, _T_410) @[ROB.scala 75:40]
    node _T_412 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_413 = lt(UInt<4>("h09"), next_unreserved) @[ROB.scala 76:47]
    node _T_414 = leq(unreserved, UInt<4>("h09")) @[ROB.scala 76:79]
    node _T_415 = or(_T_413, _T_414) @[ROB.scala 76:65]
    node _T_416 = and(_T_412, _T_415) @[ROB.scala 76:39]
    node _T_417 = or(_T_411, _T_416) @[ROB.scala 75:89]
    node _T_418 = and(_T_406, _T_417) @[ROB.scala 74:39]
    node _T_419 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_420 = leq(uncommited, UInt<4>("h09")) @[ROB.scala 79:55]
    node _T_421 = lt(UInt<4>("h09"), next_uncommited) @[ROB.scala 79:69]
    node _T_422 = and(_T_420, _T_421) @[ROB.scala 79:62]
    node _T_423 = and(_T_419, _T_422) @[ROB.scala 79:40]
    node _T_424 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_425 = lt(UInt<4>("h09"), next_uncommited) @[ROB.scala 80:48]
    node _T_426 = leq(uncommited, UInt<4>("h09")) @[ROB.scala 80:80]
    node _T_427 = or(_T_425, _T_426) @[ROB.scala 80:66]
    node _T_428 = and(_T_424, _T_427) @[ROB.scala 80:40]
    node _T_429 = or(_T_423, _T_428) @[ROB.scala 79:89]
    node _T_430 = eq(_T_393[0].bits.addr, UInt<4>("h09")) @[ROB.scala 82:60]
    node _T_431 = and(_T_393[0].valid, _T_430) @[ROB.scala 82:38]
    when _T_405 : @[ROB.scala 89:36]
      buf[9].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[9].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_418 : @[ROB.scala 92:32]
        buf[9].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_431 : @[ROB.scala 94:29]
          buf[9].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[9].data <= _T_393[0].bits.data @[ROB.scala 96:19]
          buf[9].inst_info.ctrl.rs2_use <= _T_393[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.rs1_use <= _T_393[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.mem_w <= _T_393[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.mem_r <= _T_393[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.rf_w <= _T_393[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.is_branch <= _T_393[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.is_jump <= _T_393[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[9].inst_info.ctrl.alu_op <= _T_393[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[9].inst_info.rob_addr <= _T_393[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[9].inst_info.rd_addr <= _T_393[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[9].inst_info.total_cnt <= _T_393[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[9].inst_info.pc <= _T_393[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[9].inst_info.valid <= _T_393[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_429 : @[ROB.scala 98:31]
            buf[9].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[9].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_432 = eq(io.graduate[0].bits.addr, UInt<4>("h0a")) @[ROB.scala 68:36]
    node _T_433 = and(io.graduate[0].valid, _T_432) @[ROB.scala 68:20]
    node _T_434 = mux(_T_433, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_435 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_435[0].bits.mispredicted <= _T_434.bits.mispredicted @[ROB.scala 67:62]
    _T_435[0].bits.addr <= _T_434.bits.addr @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.rs2_use <= _T_434.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.rs1_use <= _T_434.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.mem_w <= _T_434.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.mem_r <= _T_434.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.rf_w <= _T_434.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.is_branch <= _T_434.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.is_jump <= _T_434.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.ctrl.alu_op <= _T_434.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.rob_addr <= _T_434.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.rd_addr <= _T_434.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.total_cnt <= _T_434.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.pc <= _T_434.bits.inst_info.pc @[ROB.scala 67:62]
    _T_435[0].bits.inst_info.valid <= _T_434.bits.inst_info.valid @[ROB.scala 67:62]
    _T_435[0].bits.data <= _T_434.bits.data @[ROB.scala 67:62]
    _T_435[0].valid <= _T_434.valid @[ROB.scala 67:62]
    node _T_436 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_437 = leq(_T_9[0].bits.addr, UInt<4>("h0a")) @[ROB.scala 71:61]
    node _T_438 = and(_T_436, _T_437) @[ROB.scala 71:41]
    node _T_439 = lt(UInt<4>("h0a"), unreserved) @[ROB.scala 71:75]
    node _T_440 = and(_T_438, _T_439) @[ROB.scala 71:68]
    node _T_441 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_442 = lt(UInt<4>("h0a"), unreserved) @[ROB.scala 72:48]
    node _T_443 = leq(_T_9[0].bits.addr, UInt<4>("h0a")) @[ROB.scala 72:81]
    node _T_444 = or(_T_442, _T_443) @[ROB.scala 72:61]
    node _T_445 = and(_T_441, _T_444) @[ROB.scala 72:40]
    node _T_446 = or(_T_440, _T_445) @[ROB.scala 71:89]
    node _T_447 = and(mispredicted, _T_446) @[ROB.scala 70:56]
    node _T_448 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_449 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_450 = leq(unreserved, UInt<4>("h0a")) @[ROB.scala 75:55]
    node _T_451 = lt(UInt<4>("h0a"), next_unreserved) @[ROB.scala 75:69]
    node _T_452 = and(_T_450, _T_451) @[ROB.scala 75:62]
    node _T_453 = and(_T_449, _T_452) @[ROB.scala 75:40]
    node _T_454 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_455 = lt(UInt<4>("h0a"), next_unreserved) @[ROB.scala 76:47]
    node _T_456 = leq(unreserved, UInt<4>("h0a")) @[ROB.scala 76:79]
    node _T_457 = or(_T_455, _T_456) @[ROB.scala 76:65]
    node _T_458 = and(_T_454, _T_457) @[ROB.scala 76:39]
    node _T_459 = or(_T_453, _T_458) @[ROB.scala 75:89]
    node _T_460 = and(_T_448, _T_459) @[ROB.scala 74:39]
    node _T_461 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_462 = leq(uncommited, UInt<4>("h0a")) @[ROB.scala 79:55]
    node _T_463 = lt(UInt<4>("h0a"), next_uncommited) @[ROB.scala 79:69]
    node _T_464 = and(_T_462, _T_463) @[ROB.scala 79:62]
    node _T_465 = and(_T_461, _T_464) @[ROB.scala 79:40]
    node _T_466 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_467 = lt(UInt<4>("h0a"), next_uncommited) @[ROB.scala 80:48]
    node _T_468 = leq(uncommited, UInt<4>("h0a")) @[ROB.scala 80:80]
    node _T_469 = or(_T_467, _T_468) @[ROB.scala 80:66]
    node _T_470 = and(_T_466, _T_469) @[ROB.scala 80:40]
    node _T_471 = or(_T_465, _T_470) @[ROB.scala 79:89]
    node _T_472 = eq(_T_435[0].bits.addr, UInt<4>("h0a")) @[ROB.scala 82:60]
    node _T_473 = and(_T_435[0].valid, _T_472) @[ROB.scala 82:38]
    when _T_447 : @[ROB.scala 89:36]
      buf[10].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[10].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_460 : @[ROB.scala 92:32]
        buf[10].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_473 : @[ROB.scala 94:29]
          buf[10].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[10].data <= _T_435[0].bits.data @[ROB.scala 96:19]
          buf[10].inst_info.ctrl.rs2_use <= _T_435[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.rs1_use <= _T_435[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.mem_w <= _T_435[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.mem_r <= _T_435[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.rf_w <= _T_435[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.is_branch <= _T_435[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.is_jump <= _T_435[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[10].inst_info.ctrl.alu_op <= _T_435[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[10].inst_info.rob_addr <= _T_435[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[10].inst_info.rd_addr <= _T_435[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[10].inst_info.total_cnt <= _T_435[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[10].inst_info.pc <= _T_435[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[10].inst_info.valid <= _T_435[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_471 : @[ROB.scala 98:31]
            buf[10].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[10].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_474 = eq(io.graduate[0].bits.addr, UInt<4>("h0b")) @[ROB.scala 68:36]
    node _T_475 = and(io.graduate[0].valid, _T_474) @[ROB.scala 68:20]
    node _T_476 = mux(_T_475, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_477 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_477[0].bits.mispredicted <= _T_476.bits.mispredicted @[ROB.scala 67:62]
    _T_477[0].bits.addr <= _T_476.bits.addr @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.rs2_use <= _T_476.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.rs1_use <= _T_476.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.mem_w <= _T_476.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.mem_r <= _T_476.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.rf_w <= _T_476.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.is_branch <= _T_476.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.is_jump <= _T_476.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.ctrl.alu_op <= _T_476.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.rob_addr <= _T_476.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.rd_addr <= _T_476.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.total_cnt <= _T_476.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.pc <= _T_476.bits.inst_info.pc @[ROB.scala 67:62]
    _T_477[0].bits.inst_info.valid <= _T_476.bits.inst_info.valid @[ROB.scala 67:62]
    _T_477[0].bits.data <= _T_476.bits.data @[ROB.scala 67:62]
    _T_477[0].valid <= _T_476.valid @[ROB.scala 67:62]
    node _T_478 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_479 = leq(_T_9[0].bits.addr, UInt<4>("h0b")) @[ROB.scala 71:61]
    node _T_480 = and(_T_478, _T_479) @[ROB.scala 71:41]
    node _T_481 = lt(UInt<4>("h0b"), unreserved) @[ROB.scala 71:75]
    node _T_482 = and(_T_480, _T_481) @[ROB.scala 71:68]
    node _T_483 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_484 = lt(UInt<4>("h0b"), unreserved) @[ROB.scala 72:48]
    node _T_485 = leq(_T_9[0].bits.addr, UInt<4>("h0b")) @[ROB.scala 72:81]
    node _T_486 = or(_T_484, _T_485) @[ROB.scala 72:61]
    node _T_487 = and(_T_483, _T_486) @[ROB.scala 72:40]
    node _T_488 = or(_T_482, _T_487) @[ROB.scala 71:89]
    node _T_489 = and(mispredicted, _T_488) @[ROB.scala 70:56]
    node _T_490 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_491 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_492 = leq(unreserved, UInt<4>("h0b")) @[ROB.scala 75:55]
    node _T_493 = lt(UInt<4>("h0b"), next_unreserved) @[ROB.scala 75:69]
    node _T_494 = and(_T_492, _T_493) @[ROB.scala 75:62]
    node _T_495 = and(_T_491, _T_494) @[ROB.scala 75:40]
    node _T_496 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_497 = lt(UInt<4>("h0b"), next_unreserved) @[ROB.scala 76:47]
    node _T_498 = leq(unreserved, UInt<4>("h0b")) @[ROB.scala 76:79]
    node _T_499 = or(_T_497, _T_498) @[ROB.scala 76:65]
    node _T_500 = and(_T_496, _T_499) @[ROB.scala 76:39]
    node _T_501 = or(_T_495, _T_500) @[ROB.scala 75:89]
    node _T_502 = and(_T_490, _T_501) @[ROB.scala 74:39]
    node _T_503 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_504 = leq(uncommited, UInt<4>("h0b")) @[ROB.scala 79:55]
    node _T_505 = lt(UInt<4>("h0b"), next_uncommited) @[ROB.scala 79:69]
    node _T_506 = and(_T_504, _T_505) @[ROB.scala 79:62]
    node _T_507 = and(_T_503, _T_506) @[ROB.scala 79:40]
    node _T_508 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_509 = lt(UInt<4>("h0b"), next_uncommited) @[ROB.scala 80:48]
    node _T_510 = leq(uncommited, UInt<4>("h0b")) @[ROB.scala 80:80]
    node _T_511 = or(_T_509, _T_510) @[ROB.scala 80:66]
    node _T_512 = and(_T_508, _T_511) @[ROB.scala 80:40]
    node _T_513 = or(_T_507, _T_512) @[ROB.scala 79:89]
    node _T_514 = eq(_T_477[0].bits.addr, UInt<4>("h0b")) @[ROB.scala 82:60]
    node _T_515 = and(_T_477[0].valid, _T_514) @[ROB.scala 82:38]
    when _T_489 : @[ROB.scala 89:36]
      buf[11].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[11].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_502 : @[ROB.scala 92:32]
        buf[11].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_515 : @[ROB.scala 94:29]
          buf[11].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[11].data <= _T_477[0].bits.data @[ROB.scala 96:19]
          buf[11].inst_info.ctrl.rs2_use <= _T_477[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.rs1_use <= _T_477[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.mem_w <= _T_477[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.mem_r <= _T_477[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.rf_w <= _T_477[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.is_branch <= _T_477[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.is_jump <= _T_477[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[11].inst_info.ctrl.alu_op <= _T_477[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[11].inst_info.rob_addr <= _T_477[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[11].inst_info.rd_addr <= _T_477[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[11].inst_info.total_cnt <= _T_477[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[11].inst_info.pc <= _T_477[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[11].inst_info.valid <= _T_477[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_513 : @[ROB.scala 98:31]
            buf[11].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[11].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_516 = eq(io.graduate[0].bits.addr, UInt<4>("h0c")) @[ROB.scala 68:36]
    node _T_517 = and(io.graduate[0].valid, _T_516) @[ROB.scala 68:20]
    node _T_518 = mux(_T_517, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_519 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_519[0].bits.mispredicted <= _T_518.bits.mispredicted @[ROB.scala 67:62]
    _T_519[0].bits.addr <= _T_518.bits.addr @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.rs2_use <= _T_518.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.rs1_use <= _T_518.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.mem_w <= _T_518.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.mem_r <= _T_518.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.rf_w <= _T_518.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.is_branch <= _T_518.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.is_jump <= _T_518.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.ctrl.alu_op <= _T_518.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.rob_addr <= _T_518.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.rd_addr <= _T_518.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.total_cnt <= _T_518.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.pc <= _T_518.bits.inst_info.pc @[ROB.scala 67:62]
    _T_519[0].bits.inst_info.valid <= _T_518.bits.inst_info.valid @[ROB.scala 67:62]
    _T_519[0].bits.data <= _T_518.bits.data @[ROB.scala 67:62]
    _T_519[0].valid <= _T_518.valid @[ROB.scala 67:62]
    node _T_520 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_521 = leq(_T_9[0].bits.addr, UInt<4>("h0c")) @[ROB.scala 71:61]
    node _T_522 = and(_T_520, _T_521) @[ROB.scala 71:41]
    node _T_523 = lt(UInt<4>("h0c"), unreserved) @[ROB.scala 71:75]
    node _T_524 = and(_T_522, _T_523) @[ROB.scala 71:68]
    node _T_525 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_526 = lt(UInt<4>("h0c"), unreserved) @[ROB.scala 72:48]
    node _T_527 = leq(_T_9[0].bits.addr, UInt<4>("h0c")) @[ROB.scala 72:81]
    node _T_528 = or(_T_526, _T_527) @[ROB.scala 72:61]
    node _T_529 = and(_T_525, _T_528) @[ROB.scala 72:40]
    node _T_530 = or(_T_524, _T_529) @[ROB.scala 71:89]
    node _T_531 = and(mispredicted, _T_530) @[ROB.scala 70:56]
    node _T_532 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_533 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_534 = leq(unreserved, UInt<4>("h0c")) @[ROB.scala 75:55]
    node _T_535 = lt(UInt<4>("h0c"), next_unreserved) @[ROB.scala 75:69]
    node _T_536 = and(_T_534, _T_535) @[ROB.scala 75:62]
    node _T_537 = and(_T_533, _T_536) @[ROB.scala 75:40]
    node _T_538 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_539 = lt(UInt<4>("h0c"), next_unreserved) @[ROB.scala 76:47]
    node _T_540 = leq(unreserved, UInt<4>("h0c")) @[ROB.scala 76:79]
    node _T_541 = or(_T_539, _T_540) @[ROB.scala 76:65]
    node _T_542 = and(_T_538, _T_541) @[ROB.scala 76:39]
    node _T_543 = or(_T_537, _T_542) @[ROB.scala 75:89]
    node _T_544 = and(_T_532, _T_543) @[ROB.scala 74:39]
    node _T_545 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_546 = leq(uncommited, UInt<4>("h0c")) @[ROB.scala 79:55]
    node _T_547 = lt(UInt<4>("h0c"), next_uncommited) @[ROB.scala 79:69]
    node _T_548 = and(_T_546, _T_547) @[ROB.scala 79:62]
    node _T_549 = and(_T_545, _T_548) @[ROB.scala 79:40]
    node _T_550 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_551 = lt(UInt<4>("h0c"), next_uncommited) @[ROB.scala 80:48]
    node _T_552 = leq(uncommited, UInt<4>("h0c")) @[ROB.scala 80:80]
    node _T_553 = or(_T_551, _T_552) @[ROB.scala 80:66]
    node _T_554 = and(_T_550, _T_553) @[ROB.scala 80:40]
    node _T_555 = or(_T_549, _T_554) @[ROB.scala 79:89]
    node _T_556 = eq(_T_519[0].bits.addr, UInt<4>("h0c")) @[ROB.scala 82:60]
    node _T_557 = and(_T_519[0].valid, _T_556) @[ROB.scala 82:38]
    when _T_531 : @[ROB.scala 89:36]
      buf[12].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[12].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_544 : @[ROB.scala 92:32]
        buf[12].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_557 : @[ROB.scala 94:29]
          buf[12].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[12].data <= _T_519[0].bits.data @[ROB.scala 96:19]
          buf[12].inst_info.ctrl.rs2_use <= _T_519[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.rs1_use <= _T_519[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.mem_w <= _T_519[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.mem_r <= _T_519[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.rf_w <= _T_519[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.is_branch <= _T_519[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.is_jump <= _T_519[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[12].inst_info.ctrl.alu_op <= _T_519[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[12].inst_info.rob_addr <= _T_519[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[12].inst_info.rd_addr <= _T_519[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[12].inst_info.total_cnt <= _T_519[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[12].inst_info.pc <= _T_519[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[12].inst_info.valid <= _T_519[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_555 : @[ROB.scala 98:31]
            buf[12].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[12].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_558 = eq(io.graduate[0].bits.addr, UInt<4>("h0d")) @[ROB.scala 68:36]
    node _T_559 = and(io.graduate[0].valid, _T_558) @[ROB.scala 68:20]
    node _T_560 = mux(_T_559, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_561 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_561[0].bits.mispredicted <= _T_560.bits.mispredicted @[ROB.scala 67:62]
    _T_561[0].bits.addr <= _T_560.bits.addr @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.rs2_use <= _T_560.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.rs1_use <= _T_560.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.mem_w <= _T_560.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.mem_r <= _T_560.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.rf_w <= _T_560.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.is_branch <= _T_560.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.is_jump <= _T_560.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.ctrl.alu_op <= _T_560.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.rob_addr <= _T_560.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.rd_addr <= _T_560.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.total_cnt <= _T_560.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.pc <= _T_560.bits.inst_info.pc @[ROB.scala 67:62]
    _T_561[0].bits.inst_info.valid <= _T_560.bits.inst_info.valid @[ROB.scala 67:62]
    _T_561[0].bits.data <= _T_560.bits.data @[ROB.scala 67:62]
    _T_561[0].valid <= _T_560.valid @[ROB.scala 67:62]
    node _T_562 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_563 = leq(_T_9[0].bits.addr, UInt<4>("h0d")) @[ROB.scala 71:61]
    node _T_564 = and(_T_562, _T_563) @[ROB.scala 71:41]
    node _T_565 = lt(UInt<4>("h0d"), unreserved) @[ROB.scala 71:75]
    node _T_566 = and(_T_564, _T_565) @[ROB.scala 71:68]
    node _T_567 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_568 = lt(UInt<4>("h0d"), unreserved) @[ROB.scala 72:48]
    node _T_569 = leq(_T_9[0].bits.addr, UInt<4>("h0d")) @[ROB.scala 72:81]
    node _T_570 = or(_T_568, _T_569) @[ROB.scala 72:61]
    node _T_571 = and(_T_567, _T_570) @[ROB.scala 72:40]
    node _T_572 = or(_T_566, _T_571) @[ROB.scala 71:89]
    node _T_573 = and(mispredicted, _T_572) @[ROB.scala 70:56]
    node _T_574 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_575 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_576 = leq(unreserved, UInt<4>("h0d")) @[ROB.scala 75:55]
    node _T_577 = lt(UInt<4>("h0d"), next_unreserved) @[ROB.scala 75:69]
    node _T_578 = and(_T_576, _T_577) @[ROB.scala 75:62]
    node _T_579 = and(_T_575, _T_578) @[ROB.scala 75:40]
    node _T_580 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_581 = lt(UInt<4>("h0d"), next_unreserved) @[ROB.scala 76:47]
    node _T_582 = leq(unreserved, UInt<4>("h0d")) @[ROB.scala 76:79]
    node _T_583 = or(_T_581, _T_582) @[ROB.scala 76:65]
    node _T_584 = and(_T_580, _T_583) @[ROB.scala 76:39]
    node _T_585 = or(_T_579, _T_584) @[ROB.scala 75:89]
    node _T_586 = and(_T_574, _T_585) @[ROB.scala 74:39]
    node _T_587 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_588 = leq(uncommited, UInt<4>("h0d")) @[ROB.scala 79:55]
    node _T_589 = lt(UInt<4>("h0d"), next_uncommited) @[ROB.scala 79:69]
    node _T_590 = and(_T_588, _T_589) @[ROB.scala 79:62]
    node _T_591 = and(_T_587, _T_590) @[ROB.scala 79:40]
    node _T_592 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_593 = lt(UInt<4>("h0d"), next_uncommited) @[ROB.scala 80:48]
    node _T_594 = leq(uncommited, UInt<4>("h0d")) @[ROB.scala 80:80]
    node _T_595 = or(_T_593, _T_594) @[ROB.scala 80:66]
    node _T_596 = and(_T_592, _T_595) @[ROB.scala 80:40]
    node _T_597 = or(_T_591, _T_596) @[ROB.scala 79:89]
    node _T_598 = eq(_T_561[0].bits.addr, UInt<4>("h0d")) @[ROB.scala 82:60]
    node _T_599 = and(_T_561[0].valid, _T_598) @[ROB.scala 82:38]
    when _T_573 : @[ROB.scala 89:36]
      buf[13].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[13].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_586 : @[ROB.scala 92:32]
        buf[13].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_599 : @[ROB.scala 94:29]
          buf[13].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[13].data <= _T_561[0].bits.data @[ROB.scala 96:19]
          buf[13].inst_info.ctrl.rs2_use <= _T_561[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.rs1_use <= _T_561[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.mem_w <= _T_561[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.mem_r <= _T_561[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.rf_w <= _T_561[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.is_branch <= _T_561[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.is_jump <= _T_561[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[13].inst_info.ctrl.alu_op <= _T_561[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[13].inst_info.rob_addr <= _T_561[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[13].inst_info.rd_addr <= _T_561[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[13].inst_info.total_cnt <= _T_561[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[13].inst_info.pc <= _T_561[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[13].inst_info.valid <= _T_561[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_597 : @[ROB.scala 98:31]
            buf[13].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[13].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_600 = eq(io.graduate[0].bits.addr, UInt<4>("h0e")) @[ROB.scala 68:36]
    node _T_601 = and(io.graduate[0].valid, _T_600) @[ROB.scala 68:20]
    node _T_602 = mux(_T_601, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_603 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_603[0].bits.mispredicted <= _T_602.bits.mispredicted @[ROB.scala 67:62]
    _T_603[0].bits.addr <= _T_602.bits.addr @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.rs2_use <= _T_602.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.rs1_use <= _T_602.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.mem_w <= _T_602.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.mem_r <= _T_602.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.rf_w <= _T_602.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.is_branch <= _T_602.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.is_jump <= _T_602.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.ctrl.alu_op <= _T_602.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.rob_addr <= _T_602.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.rd_addr <= _T_602.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.total_cnt <= _T_602.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.pc <= _T_602.bits.inst_info.pc @[ROB.scala 67:62]
    _T_603[0].bits.inst_info.valid <= _T_602.bits.inst_info.valid @[ROB.scala 67:62]
    _T_603[0].bits.data <= _T_602.bits.data @[ROB.scala 67:62]
    _T_603[0].valid <= _T_602.valid @[ROB.scala 67:62]
    node _T_604 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_605 = leq(_T_9[0].bits.addr, UInt<4>("h0e")) @[ROB.scala 71:61]
    node _T_606 = and(_T_604, _T_605) @[ROB.scala 71:41]
    node _T_607 = lt(UInt<4>("h0e"), unreserved) @[ROB.scala 71:75]
    node _T_608 = and(_T_606, _T_607) @[ROB.scala 71:68]
    node _T_609 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_610 = lt(UInt<4>("h0e"), unreserved) @[ROB.scala 72:48]
    node _T_611 = leq(_T_9[0].bits.addr, UInt<4>("h0e")) @[ROB.scala 72:81]
    node _T_612 = or(_T_610, _T_611) @[ROB.scala 72:61]
    node _T_613 = and(_T_609, _T_612) @[ROB.scala 72:40]
    node _T_614 = or(_T_608, _T_613) @[ROB.scala 71:89]
    node _T_615 = and(mispredicted, _T_614) @[ROB.scala 70:56]
    node _T_616 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_617 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_618 = leq(unreserved, UInt<4>("h0e")) @[ROB.scala 75:55]
    node _T_619 = lt(UInt<4>("h0e"), next_unreserved) @[ROB.scala 75:69]
    node _T_620 = and(_T_618, _T_619) @[ROB.scala 75:62]
    node _T_621 = and(_T_617, _T_620) @[ROB.scala 75:40]
    node _T_622 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_623 = lt(UInt<4>("h0e"), next_unreserved) @[ROB.scala 76:47]
    node _T_624 = leq(unreserved, UInt<4>("h0e")) @[ROB.scala 76:79]
    node _T_625 = or(_T_623, _T_624) @[ROB.scala 76:65]
    node _T_626 = and(_T_622, _T_625) @[ROB.scala 76:39]
    node _T_627 = or(_T_621, _T_626) @[ROB.scala 75:89]
    node _T_628 = and(_T_616, _T_627) @[ROB.scala 74:39]
    node _T_629 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_630 = leq(uncommited, UInt<4>("h0e")) @[ROB.scala 79:55]
    node _T_631 = lt(UInt<4>("h0e"), next_uncommited) @[ROB.scala 79:69]
    node _T_632 = and(_T_630, _T_631) @[ROB.scala 79:62]
    node _T_633 = and(_T_629, _T_632) @[ROB.scala 79:40]
    node _T_634 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_635 = lt(UInt<4>("h0e"), next_uncommited) @[ROB.scala 80:48]
    node _T_636 = leq(uncommited, UInt<4>("h0e")) @[ROB.scala 80:80]
    node _T_637 = or(_T_635, _T_636) @[ROB.scala 80:66]
    node _T_638 = and(_T_634, _T_637) @[ROB.scala 80:40]
    node _T_639 = or(_T_633, _T_638) @[ROB.scala 79:89]
    node _T_640 = eq(_T_603[0].bits.addr, UInt<4>("h0e")) @[ROB.scala 82:60]
    node _T_641 = and(_T_603[0].valid, _T_640) @[ROB.scala 82:38]
    when _T_615 : @[ROB.scala 89:36]
      buf[14].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[14].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_628 : @[ROB.scala 92:32]
        buf[14].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_641 : @[ROB.scala 94:29]
          buf[14].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[14].data <= _T_603[0].bits.data @[ROB.scala 96:19]
          buf[14].inst_info.ctrl.rs2_use <= _T_603[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.rs1_use <= _T_603[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.mem_w <= _T_603[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.mem_r <= _T_603[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.rf_w <= _T_603[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.is_branch <= _T_603[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.is_jump <= _T_603[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[14].inst_info.ctrl.alu_op <= _T_603[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[14].inst_info.rob_addr <= _T_603[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[14].inst_info.rd_addr <= _T_603[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[14].inst_info.total_cnt <= _T_603[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[14].inst_info.pc <= _T_603[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[14].inst_info.valid <= _T_603[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_639 : @[ROB.scala 98:31]
            buf[14].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[14].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_642 = eq(io.graduate[0].bits.addr, UInt<4>("h0f")) @[ROB.scala 68:36]
    node _T_643 = and(io.graduate[0].valid, _T_642) @[ROB.scala 68:20]
    node _T_644 = mux(_T_643, io.graduate[0], io.graduate[1]) @[ROB.scala 68:10]
    wire _T_645 : {valid : UInt<1>, bits : {data : UInt<16>, inst_info : {valid : UInt<1>, pc : UInt<16>, total_cnt : UInt<16>, rd_addr : UInt<3>, rob_addr : UInt<4>, ctrl : {alu_op : UInt<3>, is_jump : UInt<1>, is_branch : UInt<1>, rf_w : UInt<1>, mem_r : UInt<1>, mem_w : UInt<1>, rs1_use : UInt<1>, rs2_use : UInt<1>}}, addr : UInt<4>, mispredicted : UInt<1>}}[1] @[ROB.scala 67:62]
    _T_645[0].bits.mispredicted <= _T_644.bits.mispredicted @[ROB.scala 67:62]
    _T_645[0].bits.addr <= _T_644.bits.addr @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.rs2_use <= _T_644.bits.inst_info.ctrl.rs2_use @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.rs1_use <= _T_644.bits.inst_info.ctrl.rs1_use @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.mem_w <= _T_644.bits.inst_info.ctrl.mem_w @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.mem_r <= _T_644.bits.inst_info.ctrl.mem_r @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.rf_w <= _T_644.bits.inst_info.ctrl.rf_w @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.is_branch <= _T_644.bits.inst_info.ctrl.is_branch @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.is_jump <= _T_644.bits.inst_info.ctrl.is_jump @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.ctrl.alu_op <= _T_644.bits.inst_info.ctrl.alu_op @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.rob_addr <= _T_644.bits.inst_info.rob_addr @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.rd_addr <= _T_644.bits.inst_info.rd_addr @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.total_cnt <= _T_644.bits.inst_info.total_cnt @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.pc <= _T_644.bits.inst_info.pc @[ROB.scala 67:62]
    _T_645[0].bits.inst_info.valid <= _T_644.bits.inst_info.valid @[ROB.scala 67:62]
    _T_645[0].bits.data <= _T_644.bits.data @[ROB.scala 67:62]
    _T_645[0].valid <= _T_644.valid @[ROB.scala 67:62]
    node _T_646 = leq(_T_9[0].bits.addr, unreserved) @[ROB.scala 71:27]
    node _T_647 = leq(_T_9[0].bits.addr, UInt<4>("h0f")) @[ROB.scala 71:61]
    node _T_648 = and(_T_646, _T_647) @[ROB.scala 71:41]
    node _T_649 = lt(UInt<4>("h0f"), unreserved) @[ROB.scala 71:75]
    node _T_650 = and(_T_648, _T_649) @[ROB.scala 71:68]
    node _T_651 = gt(_T_9[0].bits.addr, unreserved) @[ROB.scala 72:27]
    node _T_652 = lt(UInt<4>("h0f"), unreserved) @[ROB.scala 72:48]
    node _T_653 = leq(_T_9[0].bits.addr, UInt<4>("h0f")) @[ROB.scala 72:81]
    node _T_654 = or(_T_652, _T_653) @[ROB.scala 72:61]
    node _T_655 = and(_T_651, _T_654) @[ROB.scala 72:40]
    node _T_656 = or(_T_650, _T_655) @[ROB.scala 71:89]
    node _T_657 = and(mispredicted, _T_656) @[ROB.scala 70:56]
    node _T_658 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 74:25]
    node _T_659 = leq(unreserved, next_unreserved) @[ROB.scala 75:20]
    node _T_660 = leq(unreserved, UInt<4>("h0f")) @[ROB.scala 75:55]
    node _T_661 = lt(UInt<4>("h0f"), next_unreserved) @[ROB.scala 75:69]
    node _T_662 = and(_T_660, _T_661) @[ROB.scala 75:62]
    node _T_663 = and(_T_659, _T_662) @[ROB.scala 75:40]
    node _T_664 = gt(unreserved, next_unreserved) @[ROB.scala 76:20]
    node _T_665 = lt(UInt<4>("h0f"), next_unreserved) @[ROB.scala 76:47]
    node _T_666 = leq(unreserved, UInt<4>("h0f")) @[ROB.scala 76:79]
    node _T_667 = or(_T_665, _T_666) @[ROB.scala 76:65]
    node _T_668 = and(_T_664, _T_667) @[ROB.scala 76:39]
    node _T_669 = or(_T_663, _T_668) @[ROB.scala 75:89]
    node _T_670 = and(_T_658, _T_669) @[ROB.scala 74:39]
    node _T_671 = leq(uncommited, next_uncommited) @[ROB.scala 79:20]
    node _T_672 = leq(uncommited, UInt<4>("h0f")) @[ROB.scala 79:55]
    node _T_673 = lt(UInt<4>("h0f"), next_uncommited) @[ROB.scala 79:69]
    node _T_674 = and(_T_672, _T_673) @[ROB.scala 79:62]
    node _T_675 = and(_T_671, _T_674) @[ROB.scala 79:40]
    node _T_676 = gt(uncommited, next_uncommited) @[ROB.scala 80:20]
    node _T_677 = lt(UInt<4>("h0f"), next_uncommited) @[ROB.scala 80:48]
    node _T_678 = leq(uncommited, UInt<4>("h0f")) @[ROB.scala 80:80]
    node _T_679 = or(_T_677, _T_678) @[ROB.scala 80:66]
    node _T_680 = and(_T_676, _T_679) @[ROB.scala 80:40]
    node _T_681 = or(_T_675, _T_680) @[ROB.scala 79:89]
    node _T_682 = eq(_T_645[0].bits.addr, UInt<4>("h0f")) @[ROB.scala 82:60]
    node _T_683 = and(_T_645[0].valid, _T_682) @[ROB.scala 82:38]
    when _T_657 : @[ROB.scala 89:36]
      buf[15].reserved <= UInt<1>("h00") @[ROB.scala 90:23]
      buf[15].committable <= UInt<1>("h00") @[ROB.scala 91:26]
      skip @[ROB.scala 89:36]
    else : @[ROB.scala 92:32]
      when _T_670 : @[ROB.scala 92:32]
        buf[15].reserved <= UInt<1>("h01") @[ROB.scala 93:23]
        skip @[ROB.scala 92:32]
      else : @[ROB.scala 94:29]
        when _T_683 : @[ROB.scala 94:29]
          buf[15].committable <= UInt<1>("h01") @[ROB.scala 95:26]
          buf[15].data <= _T_645[0].bits.data @[ROB.scala 96:19]
          buf[15].inst_info.ctrl.rs2_use <= _T_645[0].bits.inst_info.ctrl.rs2_use @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.rs1_use <= _T_645[0].bits.inst_info.ctrl.rs1_use @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.mem_w <= _T_645[0].bits.inst_info.ctrl.mem_w @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.mem_r <= _T_645[0].bits.inst_info.ctrl.mem_r @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.rf_w <= _T_645[0].bits.inst_info.ctrl.rf_w @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.is_branch <= _T_645[0].bits.inst_info.ctrl.is_branch @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.is_jump <= _T_645[0].bits.inst_info.ctrl.is_jump @[ROB.scala 97:24]
          buf[15].inst_info.ctrl.alu_op <= _T_645[0].bits.inst_info.ctrl.alu_op @[ROB.scala 97:24]
          buf[15].inst_info.rob_addr <= _T_645[0].bits.inst_info.rob_addr @[ROB.scala 97:24]
          buf[15].inst_info.rd_addr <= _T_645[0].bits.inst_info.rd_addr @[ROB.scala 97:24]
          buf[15].inst_info.total_cnt <= _T_645[0].bits.inst_info.total_cnt @[ROB.scala 97:24]
          buf[15].inst_info.pc <= _T_645[0].bits.inst_info.pc @[ROB.scala 97:24]
          buf[15].inst_info.valid <= _T_645[0].bits.inst_info.valid @[ROB.scala 97:24]
          skip @[ROB.scala 94:29]
        else : @[ROB.scala 98:31]
          when _T_681 : @[ROB.scala 98:31]
            buf[15].reserved <= UInt<1>("h00") @[ROB.scala 99:23]
            buf[15].committable <= UInt<1>("h00") @[ROB.scala 100:26]
            skip @[ROB.scala 98:31]
    node _T_684 = add(uncommited, UInt<1>("h00")) @[ROB.scala 105:39]
    node _T_685 = tail(_T_684, 1) @[ROB.scala 105:39]
    node _T_686 = lt(UInt<1>("h00"), can_commit_cnt_v[0]) @[ROB.scala 106:15]
    when _T_686 : @[ROB.scala 106:33]
      io.commit[0].rf_w <= buf[_T_685].inst_info.ctrl.rf_w @[ROB.scala 107:25]
      io.commit[0].rd_addr <= buf[_T_685].inst_info.rd_addr @[ROB.scala 108:28]
      io.commit[0].data <= buf[_T_685].data @[ROB.scala 109:25]
      skip @[ROB.scala 106:33]
    else : @[ROB.scala 110:18]
      io.commit[0].rf_w <= UInt<1>("h00") @[ROB.scala 111:25]
      io.commit[0].rd_addr <= UInt<1>("h00") @[ROB.scala 112:28]
      io.commit[0].data <= UInt<20>("h0a00af") @[ROB.scala 113:25]
      skip @[ROB.scala 110:18]
    node _T_687 = eq(mispredicted, UInt<1>("h00")) @[ROB.scala 117:65]
    node _T_688 = and(unreserved_add_used_valid, _T_687) @[ROB.scala 117:62]
    io.unreserved_head[0].valid <= _T_688 @[ROB.scala 117:33]
    node _T_689 = add(unreserved, UInt<1>("h00")) @[ROB.scala 118:46]
    node _T_690 = tail(_T_689, 1) @[ROB.scala 118:46]
    io.unreserved_head[0].bits <= _T_690 @[ROB.scala 118:32]
    node _T_691 = asUInt(reset) @[ROB.scala 121:9]
    node _T_692 = eq(_T_691, UInt<1>("h00")) @[ROB.scala 121:9]
    when _T_692 : @[ROB.scala 121:9]
      printf(clock, UInt<1>(1), "unreserved: %d, next_unreserved: %d\n", unreserved, next_unreserved) @[ROB.scala 121:9]
      skip @[ROB.scala 121:9]
    node _T_693 = asUInt(reset) @[ROB.scala 122:9]
    node _T_694 = eq(_T_693, UInt<1>("h00")) @[ROB.scala 122:9]
    when _T_694 : @[ROB.scala 122:9]
      printf(clock, UInt<1>(1), "uncommited: %d, next_uncommited: %d, can_commit_cnt: %d\n", uncommited, next_uncommited, can_commit_cnt_v[0]) @[ROB.scala 122:9]
      skip @[ROB.scala 122:9]
    node _T_695 = asUInt(reset) @[ROB.scala 123:9]
    node _T_696 = eq(_T_695, UInt<1>("h00")) @[ROB.scala 123:9]
    when _T_696 : @[ROB.scala 123:9]
      printf(clock, UInt<1>(1), "mispredicted: %d, unreserved_add_used_valid: %d\n", mispredicted, unreserved_add_used_valid) @[ROB.scala 123:9]
      skip @[ROB.scala 123:9]
    node _T_697 = asUInt(reset) @[ROB.scala 124:9]
    node _T_698 = eq(_T_697, UInt<1>("h00")) @[ROB.scala 124:9]
    when _T_698 : @[ROB.scala 124:9]
      printf(clock, UInt<1>(1), "-----------------------------------\n") @[ROB.scala 124:9]
      skip @[ROB.scala 124:9]
    
  module Hart : 
    input clock : Clock
    input reset : UInt<1>
    output io : {pc : UInt<16>, total_cnt : UInt<16>, rf : UInt<16>[8]}
    
    inst m_bp of BranchPredictor @[Hart.scala 36:37]
    m_bp.clock <= clock
    m_bp.reset <= reset
    inst s_if of IF @[Hart.scala 37:24]
    s_if.clock <= clock
    s_if.reset <= reset
    inst s_id of ID @[Hart.scala 38:24]
    s_id.clock <= clock
    s_id.reset <= reset
    inst s_ex of EX @[Hart.scala 39:24]
    s_ex.clock <= clock
    s_ex.reset <= reset
    inst s_im of IM @[Hart.scala 40:24]
    s_im.clock <= clock
    s_im.reset <= reset
    inst m_rob of ROB @[Hart.scala 41:26]
    m_rob.clock <= clock
    m_rob.reset <= reset
    s_if.io.in.predict <= m_bp.io.predict @[Hart.scala 46:22]
    s_if.io.in.predict_enable <= s_id.io.inst_info.ctrl.is_branch @[Hart.scala 47:29]
    s_if.io.in.predict_pc <= s_id.io.jump_pc @[Hart.scala 48:25]
    s_if.io.in.branch_mispredicted <= s_ex.io.mispredicted @[Hart.scala 50:34]
    s_if.io.in.branch_graduated <= s_ex.io.inst_info_out.ctrl.is_branch @[Hart.scala 51:31]
    s_if.io.in.restoration_pc <= s_ex.io.restoration_pc_out @[Hart.scala 52:29]
    s_if.io.in.is_jump <= s_id.io.inst_info.ctrl.is_jump @[Hart.scala 54:22]
    s_if.io.in.jump_pc <= s_id.io.jump_pc @[Hart.scala 55:22]
    s_if.io.in.stall <= s_id.io.stall @[Hart.scala 57:20]
    m_bp.io.pc <= s_if.io.out.pc @[Hart.scala 61:14]
    m_bp.io.stall <= s_id.io.stall @[Hart.scala 62:17]
    m_bp.io.learning.valid <= s_ex.io.inst_info_out.ctrl.is_branch @[Hart.scala 63:26]
    m_bp.io.learning.bits.result <= s_ex.io.alu_out @[Hart.scala 64:32]
    m_bp.io.learning.bits.pc <= s_ex.io.pc_out @[Hart.scala 65:28]
    s_id.io.predict <= m_bp.io.predict @[Hart.scala 69:19]
    s_id.io.branch_mispredicted <= s_ex.io.mispredicted @[Hart.scala 70:31]
    s_id.io.branch_graduated <= s_ex.io.inst_info_out.ctrl.is_branch @[Hart.scala 71:28]
    s_id.io.if_out.inst_bits.disp6u <= s_if.io.out.inst_bits.disp6u @[Hart.scala 72:18]
    s_id.io.if_out.inst_bits.rs <= s_if.io.out.inst_bits.rs @[Hart.scala 72:18]
    s_id.io.if_out.inst_bits.rd <= s_if.io.out.inst_bits.rd @[Hart.scala 72:18]
    s_id.io.if_out.inst_bits.op <= s_if.io.out.inst_bits.op @[Hart.scala 72:18]
    s_id.io.if_out.total_cnt <= s_if.io.out.total_cnt @[Hart.scala 72:18]
    s_id.io.if_out.pc <= s_if.io.out.pc @[Hart.scala 72:18]
    wire rfwrite_nop : {rd_addr : UInt<3>, rf_w : UInt<1>, data : UInt<16>} @[Hart.scala 73:34]
    rfwrite_nop.rf_w <= UInt<1>("h00") @[Hart.scala 74:20]
    rfwrite_nop.rd_addr <= UInt<1>("h00") @[Hart.scala 75:23]
    rfwrite_nop.data <= UInt<1>("h00") @[Hart.scala 76:20]
    s_id.io.commit[0].data <= m_rob.io.commit[0].data @[Hart.scala 77:21]
    s_id.io.commit[0].rf_w <= m_rob.io.commit[0].rf_w @[Hart.scala 77:21]
    s_id.io.commit[0].rd_addr <= m_rob.io.commit[0].rd_addr @[Hart.scala 77:21]
    s_id.io.commit[1].data <= rfwrite_nop.data @[Hart.scala 78:21]
    s_id.io.commit[1].rf_w <= rfwrite_nop.rf_w @[Hart.scala 78:21]
    s_id.io.commit[1].rd_addr <= rfwrite_nop.rd_addr @[Hart.scala 78:21]
    s_id.io.unreserved_head[0].bits <= m_rob.io.unreserved_head[0].bits @[Hart.scala 79:27]
    s_id.io.unreserved_head[0].valid <= m_rob.io.unreserved_head[0].valid @[Hart.scala 79:27]
    s_ex.io.predict <= m_bp.io.predict @[Hart.scala 83:19]
    s_ex.io.inst_info.ctrl.rs2_use <= s_id.io.inst_info.ctrl.rs2_use @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.rs1_use <= s_id.io.inst_info.ctrl.rs1_use @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.mem_w <= s_id.io.inst_info.ctrl.mem_w @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.mem_r <= s_id.io.inst_info.ctrl.mem_r @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.rf_w <= s_id.io.inst_info.ctrl.rf_w @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.is_branch <= s_id.io.inst_info.ctrl.is_branch @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.is_jump <= s_id.io.inst_info.ctrl.is_jump @[Hart.scala 84:21]
    s_ex.io.inst_info.ctrl.alu_op <= s_id.io.inst_info.ctrl.alu_op @[Hart.scala 84:21]
    s_ex.io.inst_info.rob_addr <= s_id.io.inst_info.rob_addr @[Hart.scala 84:21]
    s_ex.io.inst_info.rd_addr <= s_id.io.inst_info.rd_addr @[Hart.scala 84:21]
    s_ex.io.inst_info.total_cnt <= s_id.io.inst_info.total_cnt @[Hart.scala 84:21]
    s_ex.io.inst_info.pc <= s_id.io.inst_info.pc @[Hart.scala 84:21]
    s_ex.io.inst_info.valid <= s_id.io.inst_info.valid @[Hart.scala 84:21]
    s_ex.io.source[0] <= s_id.io.source[0] @[Hart.scala 85:18]
    s_ex.io.source[1] <= s_id.io.source[1] @[Hart.scala 85:18]
    s_ex.io.rd <= s_id.io.rd @[Hart.scala 86:14]
    s_ex.io.next_pc <= s_id.io.next_pc @[Hart.scala 87:19]
    s_ex.io.branch_pc <= s_id.io.jump_pc @[Hart.scala 88:21]
    s_ex.io.pc <= s_id.io.pc @[Hart.scala 89:14]
    s_im.io.inst_info.ctrl.rs2_use <= s_ex.io.inst_info_out.ctrl.rs2_use @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.rs1_use <= s_ex.io.inst_info_out.ctrl.rs1_use @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.mem_w <= s_ex.io.inst_info_out.ctrl.mem_w @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.mem_r <= s_ex.io.inst_info_out.ctrl.mem_r @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.rf_w <= s_ex.io.inst_info_out.ctrl.rf_w @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.is_branch <= s_ex.io.inst_info_out.ctrl.is_branch @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.is_jump <= s_ex.io.inst_info_out.ctrl.is_jump @[Hart.scala 93:21]
    s_im.io.inst_info.ctrl.alu_op <= s_ex.io.inst_info_out.ctrl.alu_op @[Hart.scala 93:21]
    s_im.io.inst_info.rob_addr <= s_ex.io.inst_info_out.rob_addr @[Hart.scala 93:21]
    s_im.io.inst_info.rd_addr <= s_ex.io.inst_info_out.rd_addr @[Hart.scala 93:21]
    s_im.io.inst_info.total_cnt <= s_ex.io.inst_info_out.total_cnt @[Hart.scala 93:21]
    s_im.io.inst_info.pc <= s_ex.io.inst_info_out.pc @[Hart.scala 93:21]
    s_im.io.inst_info.valid <= s_ex.io.inst_info_out.valid @[Hart.scala 93:21]
    s_im.io.alu_out <= s_ex.io.alu_out @[Hart.scala 94:19]
    s_im.io.rd_out <= s_ex.io.rd_out @[Hart.scala 95:18]
    m_rob.io.used_num <= s_id.io.used_num @[Hart.scala 99:21]
    m_rob.io.graduate[0].valid <= s_ex.io.inst_info_out.valid @[Hart.scala 100:30]
    m_rob.io.graduate[0].bits.addr <= s_ex.io.inst_info_out.rob_addr @[Hart.scala 101:34]
    m_rob.io.graduate[0].bits.mispredicted <= s_ex.io.mispredicted @[Hart.scala 102:42]
    m_rob.io.graduate[0].bits.inst_info.ctrl.rs2_use <= s_ex.io.inst_info_out.ctrl.rs2_use @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.rs1_use <= s_ex.io.inst_info_out.ctrl.rs1_use @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.mem_w <= s_ex.io.inst_info_out.ctrl.mem_w @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.mem_r <= s_ex.io.inst_info_out.ctrl.mem_r @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.rf_w <= s_ex.io.inst_info_out.ctrl.rf_w @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.is_branch <= s_ex.io.inst_info_out.ctrl.is_branch @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.is_jump <= s_ex.io.inst_info_out.ctrl.is_jump @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.ctrl.alu_op <= s_ex.io.inst_info_out.ctrl.alu_op @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.rob_addr <= s_ex.io.inst_info_out.rob_addr @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.rd_addr <= s_ex.io.inst_info_out.rd_addr @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.total_cnt <= s_ex.io.inst_info_out.total_cnt @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.pc <= s_ex.io.inst_info_out.pc @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.inst_info.valid <= s_ex.io.inst_info_out.valid @[Hart.scala 103:39]
    m_rob.io.graduate[0].bits.data <= s_ex.io.alu_out @[Hart.scala 104:34]
    m_rob.io.graduate[1].valid <= s_im.io.inst_info.valid @[Hart.scala 105:30]
    m_rob.io.graduate[1].bits.addr <= s_im.io.inst_info.rob_addr @[Hart.scala 106:34]
    m_rob.io.graduate[1].bits.mispredicted <= UInt<1>("h00") @[Hart.scala 107:42]
    m_rob.io.graduate[1].bits.inst_info.ctrl.rs2_use <= s_im.io.inst_info.ctrl.rs2_use @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.rs1_use <= s_im.io.inst_info.ctrl.rs1_use @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.mem_w <= s_im.io.inst_info.ctrl.mem_w @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.mem_r <= s_im.io.inst_info.ctrl.mem_r @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.rf_w <= s_im.io.inst_info.ctrl.rf_w @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.is_branch <= s_im.io.inst_info.ctrl.is_branch @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.is_jump <= s_im.io.inst_info.ctrl.is_jump @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.ctrl.alu_op <= s_im.io.inst_info.ctrl.alu_op @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.rob_addr <= s_im.io.inst_info.rob_addr @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.rd_addr <= s_im.io.inst_info.rd_addr @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.total_cnt <= s_im.io.inst_info.total_cnt @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.pc <= s_im.io.inst_info.pc @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.inst_info.valid <= s_im.io.inst_info.valid @[Hart.scala 108:39]
    m_rob.io.graduate[1].bits.data <= s_im.io.mem_out @[Hart.scala 109:34]
    io.pc <= s_if.io.out.pc @[Hart.scala 113:9]
    io.total_cnt <= s_if.io.out.total_cnt @[Hart.scala 114:16]
    io.rf[0] <= s_id.io.rf4debug[0] @[Hart.scala 115:9]
    io.rf[1] <= s_id.io.rf4debug[1] @[Hart.scala 115:9]
    io.rf[2] <= s_id.io.rf4debug[2] @[Hart.scala 115:9]
    io.rf[3] <= s_id.io.rf4debug[3] @[Hart.scala 115:9]
    io.rf[4] <= s_id.io.rf4debug[4] @[Hart.scala 115:9]
    io.rf[5] <= s_id.io.rf4debug[5] @[Hart.scala 115:9]
    io.rf[6] <= s_id.io.rf4debug[6] @[Hart.scala 115:9]
    io.rf[7] <= s_id.io.rf4debug[7] @[Hart.scala 115:9]
    
